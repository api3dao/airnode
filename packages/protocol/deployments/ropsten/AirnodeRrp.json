{
  "address": "0xF6d2675468989387e96127546e0CBC9A384fa418",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "airnodeId",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "admin",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "xpub",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "address[]",
          "name": "authorizers",
          "type": "address[]"
        }
      ],
      "name": "AirnodeParametersSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "requesterIndex",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "clientAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "endorsementStatus",
          "type": "bool"
        }
      ],
      "name": "ClientEndorsementStatusSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "airnodeId",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "requestId",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "noRequests",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "chainId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "clientAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "endpointId",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "requesterIndex",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "designatedWallet",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "fulfillAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bytes4",
          "name": "fulfillFunctionId",
          "type": "bytes4"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "parameters",
          "type": "bytes"
        }
      ],
      "name": "ClientFullRequestCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "airnodeId",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "requestId",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "noRequests",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "chainId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "clientAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "templateId",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "requesterIndex",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "designatedWallet",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "fulfillAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bytes4",
          "name": "fulfillFunctionId",
          "type": "bytes4"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "parameters",
          "type": "bytes"
        }
      ],
      "name": "ClientRequestCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "airnodeId",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "requestId",
          "type": "bytes32"
        }
      ],
      "name": "ClientRequestFailed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "airnodeId",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "requestId",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "statusCode",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "ClientRequestFulfilled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "requesterIndex",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "admin",
          "type": "address"
        }
      ],
      "name": "RequesterCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "requesterIndex",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "admin",
          "type": "address"
        }
      ],
      "name": "RequesterUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "templateId",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "airnodeId",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "endpointId",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "parameters",
          "type": "bytes"
        }
      ],
      "name": "TemplateCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "airnodeId",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "requesterIndex",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "withdrawalRequestId",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "designatedWallet",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "destination",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "WithdrawalFulfilled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "airnodeId",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "requesterIndex",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "withdrawalRequestId",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "designatedWallet",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "destination",
          "type": "address"
        }
      ],
      "name": "WithdrawalRequested",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "airnodeId",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "requestId",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "endpointId",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "requesterIndex",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "designatedWallet",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "clientAddress",
          "type": "address"
        }
      ],
      "name": "checkAuthorizationStatus",
      "outputs": [
        {
          "internalType": "bool",
          "name": "status",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "airnodeId",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32[]",
          "name": "requestIds",
          "type": "bytes32[]"
        },
        {
          "internalType": "bytes32[]",
          "name": "endpointIds",
          "type": "bytes32[]"
        },
        {
          "internalType": "uint256[]",
          "name": "requesterIndices",
          "type": "uint256[]"
        },
        {
          "internalType": "address[]",
          "name": "designatedWallets",
          "type": "address[]"
        },
        {
          "internalType": "address[]",
          "name": "clientAddresses",
          "type": "address[]"
        }
      ],
      "name": "checkAuthorizationStatuses",
      "outputs": [
        {
          "internalType": "bool[]",
          "name": "statuses",
          "type": "bool[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "clientAddressToNoRequests",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "admin",
          "type": "address"
        }
      ],
      "name": "createRequester",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "requesterIndex",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "airnodeId",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "endpointId",
          "type": "bytes32"
        },
        {
          "internalType": "bytes",
          "name": "parameters",
          "type": "bytes"
        }
      ],
      "name": "createTemplate",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "templateId",
          "type": "bytes32"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "requestId",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "airnodeId",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "fulfillAddress",
          "type": "address"
        },
        {
          "internalType": "bytes4",
          "name": "fulfillFunctionId",
          "type": "bytes4"
        }
      ],
      "name": "fail",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "requestId",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "airnodeId",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "statusCode",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        },
        {
          "internalType": "address",
          "name": "fulfillAddress",
          "type": "address"
        },
        {
          "internalType": "bytes4",
          "name": "fulfillFunctionId",
          "type": "bytes4"
        }
      ],
      "name": "fulfill",
      "outputs": [
        {
          "internalType": "bool",
          "name": "callSuccess",
          "type": "bool"
        },
        {
          "internalType": "bytes",
          "name": "callData",
          "type": "bytes"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "withdrawalRequestId",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "airnodeId",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "requesterIndex",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "destination",
          "type": "address"
        }
      ],
      "name": "fulfillWithdrawal",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "airnodeId",
          "type": "bytes32"
        }
      ],
      "name": "getAirnodeParameters",
      "outputs": [
        {
          "internalType": "address",
          "name": "admin",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "xpub",
          "type": "string"
        },
        {
          "internalType": "address[]",
          "name": "authorizers",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "airnodeId",
          "type": "bytes32"
        }
      ],
      "name": "getAirnodeParametersAndBlockNumber",
      "outputs": [
        {
          "internalType": "address",
          "name": "admin",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "xpub",
          "type": "string"
        },
        {
          "internalType": "address[]",
          "name": "authorizers",
          "type": "address[]"
        },
        {
          "internalType": "uint256",
          "name": "blockNumber",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "templateId",
          "type": "bytes32"
        }
      ],
      "name": "getTemplate",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "airnodeId",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "endpointId",
          "type": "bytes32"
        },
        {
          "internalType": "bytes",
          "name": "parameters",
          "type": "bytes"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32[]",
          "name": "templateIds",
          "type": "bytes32[]"
        }
      ],
      "name": "getTemplates",
      "outputs": [
        {
          "internalType": "bytes32[]",
          "name": "airnodeIds",
          "type": "bytes32[]"
        },
        {
          "internalType": "bytes32[]",
          "name": "endpointIds",
          "type": "bytes32[]"
        },
        {
          "internalType": "bytes[]",
          "name": "parameters",
          "type": "bytes[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "airnodeId",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "endpointId",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "requesterIndex",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "designatedWallet",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "fulfillAddress",
          "type": "address"
        },
        {
          "internalType": "bytes4",
          "name": "fulfillFunctionId",
          "type": "bytes4"
        },
        {
          "internalType": "bytes",
          "name": "parameters",
          "type": "bytes"
        }
      ],
      "name": "makeFullRequest",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "requestId",
          "type": "bytes32"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "templateId",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "requesterIndex",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "designatedWallet",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "fulfillAddress",
          "type": "address"
        },
        {
          "internalType": "bytes4",
          "name": "fulfillFunctionId",
          "type": "bytes4"
        },
        {
          "internalType": "bytes",
          "name": "parameters",
          "type": "bytes"
        }
      ],
      "name": "makeRequest",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "requestId",
          "type": "bytes32"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "requestWithIdHasFailed",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "airnodeId",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "requesterIndex",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "designatedWallet",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "destination",
          "type": "address"
        }
      ],
      "name": "requestWithdrawal",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "requesterIndexToAdmin",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "requesterIndexToClientAddressToEndorsementStatus",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "requesterIndexToNextWithdrawalRequestIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "admin",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "xpub",
          "type": "string"
        },
        {
          "internalType": "address[]",
          "name": "authorizers",
          "type": "address[]"
        }
      ],
      "name": "setAirnodeParameters",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "airnodeId",
          "type": "bytes32"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "admin",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "xpub",
          "type": "string"
        },
        {
          "internalType": "address[]",
          "name": "authorizers",
          "type": "address[]"
        }
      ],
      "name": "setAirnodeParametersAndForwardFunds",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "airnodeId",
          "type": "bytes32"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "requesterIndex",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "clientAddress",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "endorsementStatus",
          "type": "bool"
        }
      ],
      "name": "setClientEndorsementStatus",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "requesterIndex",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "admin",
          "type": "address"
        }
      ],
      "name": "setRequesterAdmin",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x9c2c0688d493c6af06fe93727d6b7a6fac0492961dcc03255cb1571348dc4da0",
  "receipt": {
    "to": null,
    "from": "0x07b589f06bD0A5324c4E2376d66d2F4F25921DE1",
    "contractAddress": "0xF6d2675468989387e96127546e0CBC9A384fa418",
    "transactionIndex": 17,
    "gasUsed": "3588797",
    "logsBloom": "0x
    "blockHash": "0xc75444f11126d1e9975f0c7ed89f61f4d12675126e15001a26ff3a31ab0d8103",
    "transactionHash": "0x9c2c0688d493c6af06fe93727d6b7a6fac0492961dcc03255cb1571348dc4da0",
    "logs": [],
    "blockNumber": 10124029,
    "cumulativeGasUsed": "7829514",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "00792fd6fbc012222a4419af91c6ef63",
  "metadata": "{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"airnodeId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"admin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"xpub\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"authorizers\",\"type\":\"address[]\"}],\"name\":\"AirnodeParametersSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"requesterIndex\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"clientAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"endorsementStatus\",\"type\":\"bool\"}],\"name\":\"ClientEndorsementStatusSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"airnodeId\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"requestId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"noRequests\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"clientAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"endpointId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"requesterIndex\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"designatedWallet\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"fulfillAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes4\",\"name\":\"fulfillFunctionId\",\"type\":\"bytes4\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"parameters\",\"type\":\"bytes\"}],\"name\":\"ClientFullRequestCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"airnodeId\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"requestId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"noRequests\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"clientAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"templateId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"requesterIndex\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"designatedWallet\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"fulfillAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes4\",\"name\":\"fulfillFunctionId\",\"type\":\"bytes4\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"parameters\",\"type\":\"bytes\"}],\"name\":\"ClientRequestCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"airnodeId\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"requestId\",\"type\":\"bytes32\"}],\"name\":\"ClientRequestFailed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"airnodeId\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"requestId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"statusCode\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"ClientRequestFulfilled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"requesterIndex\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"admin\",\"type\":\"address\"}],\"name\":\"RequesterCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"requesterIndex\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"admin\",\"type\":\"address\"}],\"name\":\"RequesterUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"templateId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"airnodeId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"endpointId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"parameters\",\"type\":\"bytes\"}],\"name\":\"TemplateCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"airnodeId\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"requesterIndex\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"withdrawalRequestId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"designatedWallet\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"destination\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"WithdrawalFulfilled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"airnodeId\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"requesterIndex\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"withdrawalRequestId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"designatedWallet\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"destination\",\"type\":\"address\"}],\"name\":\"WithdrawalRequested\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"airnodeId\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"requestId\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"endpointId\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"requesterIndex\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"designatedWallet\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"clientAddress\",\"type\":\"address\"}],\"name\":\"checkAuthorizationStatus\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"airnodeId\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32[]\",\"name\":\"requestIds\",\"type\":\"bytes32[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"endpointIds\",\"type\":\"bytes32[]\"},{\"internalType\":\"uint256[]\",\"name\":\"requesterIndices\",\"type\":\"uint256[]\"},{\"internalType\":\"address[]\",\"name\":\"designatedWallets\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"clientAddresses\",\"type\":\"address[]\"}],\"name\":\"checkAuthorizationStatuses\",\"outputs\":[{\"internalType\":\"bool[]\",\"name\":\"statuses\",\"type\":\"bool[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"clientAddressToNoRequests\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"admin\",\"type\":\"address\"}],\"name\":\"createRequester\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"requesterIndex\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"airnodeId\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"endpointId\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"parameters\",\"type\":\"bytes\"}],\"name\":\"createTemplate\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"templateId\",\"type\":\"bytes32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"requestId\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"airnodeId\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"fulfillAddress\",\"type\":\"address\"},{\"internalType\":\"bytes4\",\"name\":\"fulfillFunctionId\",\"type\":\"bytes4\"}],\"name\":\"fail\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"requestId\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"airnodeId\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"statusCode\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"internalType\":\"address\",\"name\":\"fulfillAddress\",\"type\":\"address\"},{\"internalType\":\"bytes4\",\"name\":\"fulfillFunctionId\",\"type\":\"bytes4\"}],\"name\":\"fulfill\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"callSuccess\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"callData\",\"type\":\"bytes\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"withdrawalRequestId\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"airnodeId\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"requesterIndex\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"destination\",\"type\":\"address\"}],\"name\":\"fulfillWithdrawal\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"airnodeId\",\"type\":\"bytes32\"}],\"name\":\"getAirnodeParameters\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"admin\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"xpub\",\"type\":\"string\"},{\"internalType\":\"address[]\",\"name\":\"authorizers\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"airnodeId\",\"type\":\"bytes32\"}],\"name\":\"getAirnodeParametersAndBlockNumber\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"admin\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"xpub\",\"type\":\"string\"},{\"internalType\":\"address[]\",\"name\":\"authorizers\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"templateId\",\"type\":\"bytes32\"}],\"name\":\"getTemplate\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"airnodeId\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"endpointId\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"parameters\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"templateIds\",\"type\":\"bytes32[]\"}],\"name\":\"getTemplates\",\"outputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"airnodeIds\",\"type\":\"bytes32[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"endpointIds\",\"type\":\"bytes32[]\"},{\"internalType\":\"bytes[]\",\"name\":\"parameters\",\"type\":\"bytes[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"airnodeId\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"endpointId\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"requesterIndex\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"designatedWallet\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"fulfillAddress\",\"type\":\"address\"},{\"internalType\":\"bytes4\",\"name\":\"fulfillFunctionId\",\"type\":\"bytes4\"},{\"internalType\":\"bytes\",\"name\":\"parameters\",\"type\":\"bytes\"}],\"name\":\"makeFullRequest\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"requestId\",\"type\":\"bytes32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"templateId\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"requesterIndex\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"designatedWallet\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"fulfillAddress\",\"type\":\"address\"},{\"internalType\":\"bytes4\",\"name\":\"fulfillFunctionId\",\"type\":\"bytes4\"},{\"internalType\":\"bytes\",\"name\":\"parameters\",\"type\":\"bytes\"}],\"name\":\"makeRequest\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"requestId\",\"type\":\"bytes32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"requestWithIdHasFailed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"airnodeId\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"requesterIndex\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"designatedWallet\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"destination\",\"type\":\"address\"}],\"name\":\"requestWithdrawal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"requesterIndexToAdmin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"requesterIndexToClientAddressToEndorsementStatus\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"requesterIndexToNextWithdrawalRequestIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"admin\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"xpub\",\"type\":\"string\"},{\"internalType\":\"address[]\",\"name\":\"authorizers\",\"type\":\"address[]\"}],\"name\":\"setAirnodeParameters\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"airnodeId\",\"type\":\"bytes32\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"admin\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"xpub\",\"type\":\"string\"},{\"internalType\":\"address[]\",\"name\":\"authorizers\",\"type\":\"address[]\"}],\"name\":\"setAirnodeParametersAndForwardFunds\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"airnodeId\",\"type\":\"bytes32\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"requesterIndex\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"clientAddress\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"endorsementStatus\",\"type\":\"bool\"}],\"name\":\"setClientEndorsementStatus\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"requesterIndex\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"admin\",\"type\":\"address\"}],\"name\":\"setRequesterAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"checkAuthorizationStatus(bytes32,bytes32,bytes32,uint256,address,address)\":{\"details\":\"This method is meant to be called off-chain by the Airnode to decide if it should respond to a request. The requester can also call it, yet this function returning true should not be taken as a guarantee of the subsequent call request being fulfilled (as the Airnode may update its authorizers in the meantime). The Airnode authorizers being empty means all requests will be denied, while any `address(0)` authorizer means all requests will be accepted.\",\"params\":{\"airnodeId\":\"Airnode ID from AirnodeParameterStore\",\"clientAddress\":\"Client address\",\"designatedWallet\":\"Designated wallet\",\"endpointId\":\"Endpoint ID from EndpointStore\",\"requestId\":\"Request ID\",\"requesterIndex\":\"Requester index from RequesterStore\"},\"returns\":{\"status\":\"Authorization status of the request\"}},\"checkAuthorizationStatuses(bytes32,bytes32[],bytes32[],uint256[],address[],address[])\":{\"details\":\"If this reverts, Airnode will use checkAuthorizationStatus() to do the checks individually\",\"params\":{\"airnodeId\":\"Airnode ID from AirnodeParameterStore\",\"clientAddresses\":\"Client addresses\",\"designatedWallets\":\"Designated wallets\",\"endpointIds\":\"Endpoint IDs from EndpointStore\",\"requestIds\":\"Request IDs\",\"requesterIndices\":\"Requester indices from RequesterStore\"},\"returns\":{\"statuses\":\"Authorization statuses of the request\"}},\"createRequester(address)\":{\"params\":{\"admin\":\"Requester admin\"},\"returns\":{\"requesterIndex\":\"Requester index\"}},\"createTemplate(bytes32,bytes32,bytes)\":{\"details\":\"A specific set of request parameters will always have the same ID. This means a few things: (1) You can compute the expected ID of a set of parameters off-chain, (2) creating a new template with the same parameters will overwrite the old one and return the same template ID, (3) after you query a template with its ID, you can verify its integrity by applying the hash and comparing the result with the ID.\",\"params\":{\"airnodeId\":\"Airnode ID from AirnodeParameterStore\",\"endpointId\":\"Endpoint ID from EndpointStore\",\"parameters\":\"Static request parameters (i.e., parameters that will not change between requests, unlike the dynamic parameters determined at request-time)\"},\"returns\":{\"templateId\":\"Request template ID\"}},\"fail(bytes32,bytes32,address,bytes4)\":{\"details\":\"Airnode should fall back to this if a request cannot be fulfilled because fulfill() reverts\",\"params\":{\"airnodeId\":\"Airnode ID from AirnodeParameterStore\",\"fulfillAddress\":\"Address that will be called to fulfill\",\"fulfillFunctionId\":\"Signature of the function that will be called to fulfill\",\"requestId\":\"Request ID\"}},\"fulfill(bytes32,bytes32,uint256,bytes,address,bytes4)\":{\"details\":\"`statusCode` being zero indicates a successful fulfillment, while non-zero values indicate error (the meanings of these values are implementation-dependent). The data is ABI-encoded as a `bytes` type, with its format depending on the request specifications.\",\"params\":{\"airnodeId\":\"Airnode ID from AirnodeParameterStore\",\"data\":\"Fulfillment data\",\"fulfillAddress\":\"Address that will be called to fulfill\",\"fulfillFunctionId\":\"Signature of the function that will be called to fulfill\",\"requestId\":\"Request ID\",\"statusCode\":\"Status code of the fulfillment\"},\"returns\":{\"callData\":\"Data returned by the fulfillment call (if there is any)\",\"callSuccess\":\"If the fulfillment call succeeded\"}},\"fulfillWithdrawal(bytes32,bytes32,uint256,address)\":{\"details\":\"The Airnode sends the funds through this method to emit an event that indicates that the withdrawal request has been fulfilled\",\"params\":{\"airnodeId\":\"Airnode ID\",\"destination\":\"Withdrawal destination\",\"requesterIndex\":\"Requester index from RequesterStore\"}},\"getAirnodeParameters(bytes32)\":{\"params\":{\"airnodeId\":\"Airnode ID\"},\"returns\":{\"admin\":\"Airnode admin\",\"authorizers\":\"Authorizer contract addresses of the Airnode\",\"xpub\":\"Master public key of the Airnode\"}},\"getAirnodeParametersAndBlockNumber(bytes32)\":{\"params\":{\"airnodeId\":\"Airnode ID from AirnodeParameterStore\"},\"returns\":{\"admin\":\"Airnode admin\",\"authorizers\":\"Authorizer contract addresses of the Airnode\",\"blockNumber\":\"Block number\",\"xpub\":\"Master public key of the Airnode\"}},\"getTemplate(bytes32)\":{\"params\":{\"templateId\":\"Request template ID\"},\"returns\":{\"airnodeId\":\"Airnode ID from AirnodeParameterStore\",\"endpointId\":\"Endpoint ID from EndpointStore\",\"parameters\":\"Static request parameters (i.e., parameters that will not change between requests, unlike the dynamic parameters determined at request-time)\"}},\"getTemplates(bytes32[])\":{\"details\":\"If this reverts, Airnode will use getTemplate() to get the templates individually\",\"params\":{\"templateIds\":\"Request template IDs from TemplateStore\"},\"returns\":{\"airnodeIds\":\"Array of Airnode IDs from AirnodeParameterStore\",\"endpointIds\":\"Array of endpoint IDs from EndpointStore\",\"parameters\":\"Array of request parameters\"}},\"makeFullRequest(bytes32,bytes32,uint256,address,address,bytes4,bytes)\":{\"params\":{\"airnodeId\":\"Airnode ID from AirnodeParameterStore\",\"designatedWallet\":\"Designated wallet that is requested to fulfill the request\",\"endpointId\":\"Endpoint ID from EndpointStore\",\"fulfillAddress\":\"Address that will be called to fulfill\",\"fulfillFunctionId\":\"Signature of the function that will be called to fulfill\",\"parameters\":\"All request parameters\",\"requesterIndex\":\"Requester index from RequesterStore\"},\"returns\":{\"requestId\":\"Request ID\"}},\"makeRequest(bytes32,uint256,address,address,bytes4,bytes)\":{\"params\":{\"designatedWallet\":\"Designated wallet that is requested to fulfill the request\",\"fulfillAddress\":\"Address that will be called to fulfill\",\"fulfillFunctionId\":\"Signature of the function that will be called to fulfill\",\"parameters\":\"Parameters provided by the client in addition to the parameters in the template.\",\"requesterIndex\":\"Requester index from RequesterStore\",\"templateId\":\"Template ID from TemplateStore\"},\"returns\":{\"requestId\":\"Request ID\"}},\"requestWithdrawal(bytes32,uint256,address,address)\":{\"details\":\"We do not need to use the withdrawal request parameters in the request ID hash to validate them at the node side because all of the parameters are used during fulfillment and will get validated on-chain\",\"params\":{\"airnodeId\":\"Airnode ID\",\"designatedWallet\":\"Designated wallet that the withdrawal is requested from\",\"destination\":\"Withdrawal destination\",\"requesterIndex\":\"Requester index from RequesterStore\"}},\"setAirnodeParameters(address,string,address[])\":{\"details\":\"This method can also be used to update `admin`, `xpub` and/or `authorizers`. `admin` is not used in the protocol contracts. It is intended to potentially be referred to in authorizer contracts. Note that the Airnode can announce an incorrect `xpub`. However, the mismatch between it and the airnodeId can be detected off-chain. This needs to be payable to be callable by setAirnodeParametersAndForwardFunds().\",\"params\":{\"admin\":\"Airnode admin\",\"authorizers\":\"Authorizer contract addresses of the Airnode\",\"xpub\":\"Master public key of the Airnode\"},\"returns\":{\"airnodeId\":\"Airnode ID\"}},\"setAirnodeParametersAndForwardFunds(address,string,address[])\":{\"params\":{\"admin\":\"Airnode admin\",\"authorizers\":\"Authorizer contract addresses of the Airnode\",\"xpub\":\"Master public key of the Airnode\"},\"returns\":{\"airnodeId\":\"Airnode ID from AirnodeParameterStore\"}},\"setClientEndorsementStatus(uint256,address,bool)\":{\"details\":\"This is not Airnode-specific, i.e., the requester allows the client's requests to be fulfilled through its designated wallets across all Airnodes\",\"params\":{\"clientAddress\":\"Client address\",\"requesterIndex\":\"Requester index\"}},\"setRequesterAdmin(uint256,address)\":{\"params\":{\"admin\":\"Requester admin\",\"requesterIndex\":\"Requester index\"}}},\"title\":\"The contract used to make and fulfill requests\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"checkAuthorizationStatus(bytes32,bytes32,bytes32,uint256,address,address)\":{\"notice\":\"Uses the authorizer contracts of an Airnode to decide if a request is authorized. Once an Airnode receives a request, it calls this method to determine if it should respond. Similarly, third parties can use this method to determine if a particular request would be authorized.\"},\"checkAuthorizationStatuses(bytes32,bytes32[],bytes32[],uint256[],address[],address[])\":{\"notice\":\"A convenience function to make multiple authorization status checks with a single call\"},\"createRequester(address)\":{\"notice\":\"Creates a requester with the given parameters, addressable by the index it returns\"},\"createTemplate(bytes32,bytes32,bytes)\":{\"notice\":\"Creates a request template with the given parameters, addressable by the ID it returns\"},\"fail(bytes32,bytes32,address,bytes4)\":{\"notice\":\"Called by Airnode if the request cannot be fulfilled\"},\"fulfill(bytes32,bytes32,uint256,bytes,address,bytes4)\":{\"notice\":\"Called by Airnode to fulfill the request (regular or full)\"},\"fulfillWithdrawal(bytes32,bytes32,uint256,address)\":{\"notice\":\"Called by the Airnode using the designated wallet to fulfill the withdrawal request made by the requester\"},\"getAirnodeParameters(bytes32)\":{\"notice\":\"Retrieves the parameters of the Airnode addressed by the ID\"},\"getAirnodeParametersAndBlockNumber(bytes32)\":{\"notice\":\"A convenience method to retrieve the Airnode parameters and the block number with a single call\"},\"getTemplate(bytes32)\":{\"notice\":\"Retrieves the parameters of the request template addressed by the ID\"},\"getTemplates(bytes32[])\":{\"notice\":\"A convenience method to retrieve multiple templates with a single call\"},\"makeFullRequest(bytes32,bytes32,uint256,address,address,bytes4,bytes)\":{\"notice\":\"Called by the client to make a full request. A full request provides all of its parameters as arguments and does not refer to a template.\"},\"makeRequest(bytes32,uint256,address,address,bytes4,bytes)\":{\"notice\":\"Called by the client to make a regular request. A regular request refers to a template for the Airnode, endpoint and parameters.\"},\"requestWithdrawal(bytes32,uint256,address,address)\":{\"notice\":\"Called by the requester admin to create a request for the Airnode to send the funds kept in their designated wallet to the destination\"},\"setAirnodeParameters(address,string,address[])\":{\"notice\":\"Allows the master wallet (m) of the Airnode to set its parameters on this chain\"},\"setAirnodeParametersAndForwardFunds(address,string,address[])\":{\"notice\":\"A convenience method for the Airnode to set its parameters and forward the remaining funds in the master wallet to the Airnode admin\"},\"setClientEndorsementStatus(uint256,address,bool)\":{\"notice\":\"Called by the requester admin to endorse a client, i.e., allow a client to use its designated wallets, or disendorse them\"},\"setRequesterAdmin(uint256,address)\":{\"notice\":\"Sets the requester admin\"}},\"notice\":\"Clients use this contract to make requests and Airnodes use it to fulfill them. In addition, it inherits from the contracts that keep records or Airnodes, requesters and templates. It also includes some convenience methods that Airnodes use to reduce the number of calls they make to blockchain providers.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/AirnodeRrp.sol\":\"AirnodeRrp\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/AirnodeParameterStore.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.4;\\n\\nimport \\\"./RequesterStore.sol\\\";\\nimport \\\"./interfaces/IAirnodeParameterStore.sol\\\";\\nimport \\\"./authorizers/interfaces/IAuthorizer.sol\\\";\\n\\n/// @title The contract where the Airnode parameters are stored\\ncontract AirnodeParameterStore is RequesterStore, IAirnodeParameterStore {\\n    struct AirnodeParameter {\\n        address admin;\\n        string xpub;\\n        address[] authorizers;\\n        }\\n\\n    mapping(bytes32 => AirnodeParameter) internal airnodeParameters;\\n    mapping(bytes32 => bytes32) private withdrawalRequestIdToParameters;\\n\\n    /// @notice Allows the master wallet (m) of the Airnode to set its\\n    /// parameters on this chain\\n    /// @dev This method can also be used to update `admin`, `xpub` and/or\\n    /// `authorizers`.\\n    /// `admin` is not used in the protocol contracts. It is intended to\\n    /// potentially be referred to in authorizer contracts.\\n    /// Note that the Airnode can announce an incorrect `xpub`. However, the\\n    /// mismatch between it and the airnodeId can be detected off-chain.\\n    /// This needs to be payable to be callable by\\n    /// setAirnodeParametersAndForwardFunds().\\n    /// @param admin Airnode admin\\n    /// @param xpub Master public key of the Airnode\\n    /// @param authorizers Authorizer contract addresses of the Airnode\\n    /// @return airnodeId Airnode ID\\n    function setAirnodeParameters(\\n        address admin,\\n        string calldata xpub,\\n        address[] calldata authorizers\\n        )\\n        public\\n        payable\\n        override\\n        returns (bytes32 airnodeId)\\n    {\\n        airnodeId = keccak256(abi.encode(msg.sender));\\n        airnodeParameters[airnodeId] = AirnodeParameter({\\n            admin: admin,\\n            xpub: xpub,\\n            authorizers: authorizers\\n            });\\n        emit AirnodeParametersSet(\\n            airnodeId,\\n            admin,\\n            xpub,\\n            authorizers\\n            );\\n    }\\n\\n    /// @notice Called by the requester admin to create a request for the\\n    /// Airnode to send the funds kept in their designated wallet to the\\n    /// destination\\n    /// @dev We do not need to use the withdrawal request parameters in the\\n    /// request ID hash to validate them at the node side because all of the\\n    /// parameters are used during fulfillment and will get validated on-chain\\n    /// @param airnodeId Airnode ID\\n    /// @param requesterIndex Requester index from RequesterStore\\n    /// @param designatedWallet Designated wallet that the withdrawal is\\n    /// requested from\\n    /// @param destination Withdrawal destination\\n    function requestWithdrawal(\\n        bytes32 airnodeId,\\n        uint256 requesterIndex,\\n        address designatedWallet,\\n        address destination\\n    )\\n        external\\n        override\\n        onlyRequesterAdmin(requesterIndex)\\n    {\\n        bytes32 withdrawalRequestId = keccak256(abi.encodePacked(\\n            requesterIndexToNextWithdrawalRequestIndex[requesterIndex]++,\\n            block.chainid,\\n            requesterIndex\\n            ));\\n        bytes32 withdrawalParameters = keccak256(abi.encodePacked(\\n            airnodeId,\\n            requesterIndex,\\n            designatedWallet,\\n            destination\\n            ));\\n        withdrawalRequestIdToParameters[withdrawalRequestId] = withdrawalParameters;\\n        emit WithdrawalRequested(\\n            airnodeId,\\n            requesterIndex,\\n            withdrawalRequestId,\\n            designatedWallet,\\n            destination\\n            );\\n    }\\n\\n    /// @notice Called by the Airnode using the designated wallet to\\n    /// fulfill the withdrawal request made by the requester\\n    /// @dev The Airnode sends the funds through this method to emit an\\n    /// event that indicates that the withdrawal request has been fulfilled\\n    /// @param airnodeId Airnode ID\\n    /// @param requesterIndex Requester index from RequesterStore\\n    /// @param destination Withdrawal destination\\n    function fulfillWithdrawal(\\n        bytes32 withdrawalRequestId,\\n        bytes32 airnodeId,\\n        uint256 requesterIndex,\\n        address destination\\n        )\\n        external\\n        payable\\n        override\\n    {\\n        bytes32 withdrawalParameters = keccak256(abi.encodePacked(\\n            airnodeId,\\n            requesterIndex,\\n            msg.sender,\\n            destination\\n            ));\\n        require(\\n            withdrawalRequestIdToParameters[withdrawalRequestId] == withdrawalParameters,\\n            \\\"No such withdrawal request\\\"\\n            );\\n        delete withdrawalRequestIdToParameters[withdrawalRequestId];\\n        emit WithdrawalFulfilled(\\n            airnodeId,\\n            requesterIndex,\\n            withdrawalRequestId,\\n            msg.sender,\\n            destination,\\n            msg.value\\n            );\\n        (bool success, ) = destination.call{ value: msg.value }(\\\"\\\");  // solhint-disable-line\\n        require(success, \\\"Transfer failed\\\");\\n    }\\n\\n    /// @notice Uses the authorizer contracts of an Airnode to decide if a\\n    /// request is authorized. Once an Airnode receives a request, it calls\\n    /// this method to determine if it should respond. Similarly, third parties\\n    /// can use this method to determine if a particular request would be\\n    /// authorized.\\n    /// @dev This method is meant to be called off-chain by the Airnode to\\n    /// decide if it should respond to a request. The requester can also call\\n    /// it, yet this function returning true should not be taken as a guarantee\\n    /// of the subsequent call request being fulfilled (as the Airnode may\\n    /// update its authorizers in the meantime).\\n    /// The Airnode authorizers being empty means all requests will be denied,\\n    /// while any `address(0)` authorizer means all requests will be accepted.\\n    /// @param airnodeId Airnode ID from AirnodeParameterStore\\n    /// @param requestId Request ID\\n    /// @param endpointId Endpoint ID from EndpointStore\\n    /// @param requesterIndex Requester index from RequesterStore\\n    /// @param designatedWallet Designated wallet\\n    /// @param clientAddress Client address\\n    /// @return status Authorization status of the request\\n    function checkAuthorizationStatus(\\n        bytes32 airnodeId,\\n        bytes32 requestId,\\n        bytes32 endpointId,\\n        uint256 requesterIndex,\\n        address designatedWallet,\\n        address clientAddress\\n        )\\n        public\\n        view\\n        override\\n        returns (bool status)\\n    {\\n        address[] memory authorizerAddresses = airnodeParameters[airnodeId].authorizers;\\n        uint256 noAuthorizers = authorizerAddresses.length;\\n        for (uint256 ind = 0; ind < noAuthorizers; ind++)\\n        {\\n            address authorizerAddress = authorizerAddresses[ind];\\n            if (authorizerAddress == address(0))\\n            {\\n                return true;\\n            }\\n            IAuthorizer authorizer = IAuthorizer(authorizerAddress);\\n            if (authorizer.isAuthorized(\\n                requestId,\\n                airnodeId,\\n                endpointId,\\n                requesterIndex,\\n                designatedWallet,\\n                clientAddress\\n                ))\\n            {\\n                return true;\\n            }\\n        }\\n        return false;\\n    }\\n\\n    /// @notice Retrieves the parameters of the Airnode addressed by the ID\\n    /// @param airnodeId Airnode ID\\n    /// @return admin Airnode admin\\n    /// @return xpub Master public key of the Airnode\\n    /// @return authorizers Authorizer contract addresses of the Airnode\\n    function getAirnodeParameters(bytes32 airnodeId)\\n        external\\n        view\\n        override\\n        returns (\\n            address admin,\\n            string memory xpub,\\n            address[] memory authorizers\\n        )\\n    {\\n        AirnodeParameter storage airnodeParameter = airnodeParameters[airnodeId];\\n        admin = airnodeParameter.admin;\\n        xpub = airnodeParameter.xpub;\\n        authorizers = airnodeParameter.authorizers;\\n    }\\n}\\n\",\"keccak256\":\"0xdf3fbf8a207222056a918c1ac0f08fda39a000d5782e5804e47c5ae206a0616d\",\"license\":\"MIT\"},\"contracts/AirnodeRrp.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.4;\\n\\nimport \\\"./Convenience.sol\\\";\\nimport \\\"./interfaces/IAirnodeRrp.sol\\\";\\n\\n/// @title The contract used to make and fulfill requests\\n/// @notice Clients use this contract to make requests and Airnodes use it to\\n/// fulfill them. In addition, it inherits from the contracts that keep records\\n/// or Airnodes, requesters and templates. It also includes some convenience\\n/// methods that Airnodes use to reduce the number of calls they make to\\n/// blockchain providers.\\ncontract AirnodeRrp is Convenience, IAirnodeRrp {\\n    mapping(bytes32 => bytes32) private requestIdToFulfillmentParameters;\\n    mapping(bytes32 => bool) public requestWithIdHasFailed;\\n\\n    /// @dev Reverts if the incoming fulfillment parameters do not match the\\n    /// ones provided in the request\\n    /// @param requestId Request ID\\n    /// @param airnodeId Airnode ID from AirnodeParameterStore\\n    /// @param fulfillAddress Address that will be called to fulfill\\n    /// @param fulfillFunctionId Signature of the function that will be called\\n    /// to fulfill\\n    modifier onlyCorrectFulfillmentParameters(\\n        bytes32 requestId,\\n        bytes32 airnodeId,\\n        address fulfillAddress,\\n        bytes4 fulfillFunctionId\\n        )\\n    {\\n        bytes32 incomingFulfillmentParameters = keccak256(abi.encodePacked(\\n            airnodeId,\\n            msg.sender,\\n            fulfillAddress,\\n            fulfillFunctionId\\n            ));\\n        require(\\n            incomingFulfillmentParameters == requestIdToFulfillmentParameters[requestId],\\n            \\\"No such request\\\"\\n            );\\n        _;\\n    }\\n\\n    /// @notice Called by the client to make a regular request. A regular\\n    /// request refers to a template for the Airnode, endpoint and parameters.\\n    /// @param templateId Template ID from TemplateStore\\n    /// @param requesterIndex Requester index from RequesterStore\\n    /// @param designatedWallet Designated wallet that is requested to fulfill\\n    /// the request\\n    /// @param fulfillAddress Address that will be called to fulfill\\n    /// @param fulfillFunctionId Signature of the function that will be called\\n    /// to fulfill\\n    /// @param parameters Parameters provided by the client in addition to the\\n    /// parameters in the template.\\n    /// @return requestId Request ID\\n    function makeRequest(\\n        bytes32 templateId,\\n        uint256 requesterIndex,\\n        address designatedWallet,\\n        address fulfillAddress,\\n        bytes4 fulfillFunctionId,\\n        bytes calldata parameters\\n        )\\n        external\\n        override\\n        returns (bytes32 requestId)\\n    {\\n        require(\\n            requesterIndexToClientAddressToEndorsementStatus[requesterIndex][msg.sender],\\n            \\\"Client not endorsed by requester\\\"\\n            );\\n        uint256 clientNoRequests = clientAddressToNoRequests[msg.sender];\\n        requestId = keccak256(abi.encode(\\n            clientNoRequests,\\n            block.chainid,\\n            msg.sender,\\n            templateId,\\n            parameters\\n            ));\\n        bytes32 airnodeId = templates[templateId].airnodeId;\\n        requestIdToFulfillmentParameters[requestId] = keccak256(abi.encodePacked(\\n            airnodeId,\\n            designatedWallet,\\n            fulfillAddress,\\n            fulfillFunctionId\\n            ));\\n        emit ClientRequestCreated(\\n            airnodeId,\\n            requestId,\\n            clientNoRequests,\\n            block.chainid,\\n            msg.sender,\\n            templateId,\\n            requesterIndex,\\n            designatedWallet,\\n            fulfillAddress,\\n            fulfillFunctionId,\\n            parameters\\n        );\\n        clientAddressToNoRequests[msg.sender]++;\\n    }\\n\\n    /// @notice Called by the client to make a full request. A full request\\n    /// provides all of its parameters as arguments and does not refer to a\\n    /// template.\\n    /// @param airnodeId Airnode ID from AirnodeParameterStore\\n    /// @param endpointId Endpoint ID from EndpointStore\\n    /// @param requesterIndex Requester index from RequesterStore\\n    /// @param designatedWallet Designated wallet that is requested to fulfill\\n    /// the request\\n    /// @param fulfillAddress Address that will be called to fulfill\\n    /// @param fulfillFunctionId Signature of the function that will be called\\n    /// to fulfill\\n    /// @param parameters All request parameters\\n    /// @return requestId Request ID\\n    function makeFullRequest(\\n        bytes32 airnodeId,\\n        bytes32 endpointId,\\n        uint256 requesterIndex,\\n        address designatedWallet,\\n        address fulfillAddress,\\n        bytes4 fulfillFunctionId,\\n        bytes calldata parameters\\n        )\\n        external\\n        override\\n        returns (bytes32 requestId)\\n    {\\n        require(\\n            requesterIndexToClientAddressToEndorsementStatus[requesterIndex][msg.sender],\\n            \\\"Client not endorsed by requester\\\"\\n            );\\n        uint256 clientNoRequests = clientAddressToNoRequests[msg.sender];\\n        requestId = keccak256(abi.encode(\\n            clientNoRequests,\\n            block.chainid,\\n            msg.sender,\\n            endpointId,\\n            parameters\\n            ));\\n        requestIdToFulfillmentParameters[requestId] = keccak256(abi.encodePacked(\\n            airnodeId,\\n            designatedWallet,\\n            fulfillAddress,\\n            fulfillFunctionId\\n            ));\\n        emit ClientFullRequestCreated(\\n            airnodeId,\\n            requestId,\\n            clientNoRequests,\\n            block.chainid,\\n            msg.sender,\\n            endpointId,\\n            requesterIndex,\\n            designatedWallet,\\n            fulfillAddress,\\n            fulfillFunctionId,\\n            parameters\\n        );\\n        clientAddressToNoRequests[msg.sender]++;\\n    }\\n\\n    /// @notice Called by Airnode to fulfill the request (regular or full)\\n    /// @dev `statusCode` being zero indicates a successful fulfillment, while\\n    /// non-zero values indicate error (the meanings of these values are\\n    /// implementation-dependent).\\n    /// The data is ABI-encoded as a `bytes` type, with its format depending on\\n    /// the request specifications.\\n    /// @param requestId Request ID\\n    /// @param airnodeId Airnode ID from AirnodeParameterStore\\n    /// @param statusCode Status code of the fulfillment\\n    /// @param data Fulfillment data\\n    /// @param fulfillAddress Address that will be called to fulfill\\n    /// @param fulfillFunctionId Signature of the function that will be called\\n    /// to fulfill\\n    /// @return callSuccess If the fulfillment call succeeded\\n    /// @return callData Data returned by the fulfillment call (if there is\\n    /// any)\\n    function fulfill(\\n        bytes32 requestId,\\n        bytes32 airnodeId,\\n        uint256 statusCode,\\n        bytes calldata data,\\n        address fulfillAddress,\\n        bytes4 fulfillFunctionId\\n        )\\n        external\\n        override\\n        onlyCorrectFulfillmentParameters(\\n            requestId,\\n            airnodeId,\\n            fulfillAddress,\\n            fulfillFunctionId\\n            )\\n        returns (\\n            bool callSuccess,\\n            bytes memory callData\\n        )\\n    {\\n        delete requestIdToFulfillmentParameters[requestId];\\n        emit ClientRequestFulfilled(\\n            airnodeId,\\n            requestId,\\n            statusCode,\\n            data\\n            );\\n        (callSuccess, callData) = fulfillAddress.call(  // solhint-disable-line\\n            abi.encodeWithSelector(fulfillFunctionId, requestId, statusCode, data)\\n            );\\n    }\\n\\n    /// @notice Called by Airnode if the request cannot be fulfilled\\n    /// @dev Airnode should fall back to this if a request cannot be fulfilled\\n    /// because fulfill() reverts\\n    /// @param requestId Request ID\\n    /// @param airnodeId Airnode ID from AirnodeParameterStore\\n    /// @param fulfillAddress Address that will be called to fulfill\\n    /// @param fulfillFunctionId Signature of the function that will be called\\n    /// to fulfill\\n    function fail(\\n        bytes32 requestId,\\n        bytes32 airnodeId,\\n        address fulfillAddress,\\n        bytes4 fulfillFunctionId\\n        )\\n        external\\n        override\\n        onlyCorrectFulfillmentParameters(\\n            requestId,\\n            airnodeId,\\n            fulfillAddress,\\n            fulfillFunctionId\\n            )\\n    {\\n        delete requestIdToFulfillmentParameters[requestId];\\n        // Failure is recorded so that it can be checked externally\\n        requestWithIdHasFailed[requestId] = true;\\n        emit ClientRequestFailed(\\n            airnodeId,\\n            requestId\\n            );\\n    }\\n}\\n\",\"keccak256\":\"0x9d84981b57b388b6f12103ec98ee00e82bd47ed3963cf014846b86d2423f4975\",\"license\":\"MIT\"},\"contracts/Convenience.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.4;\\n\\nimport \\\"./AirnodeParameterStore.sol\\\";\\nimport \\\"./TemplateStore.sol\\\";\\nimport \\\"./interfaces/IConvenience.sol\\\";\\n\\n/// @title The contract that keeps the convenience methods that Airnodes use to\\n/// make batch calls\\ncontract Convenience is AirnodeParameterStore, TemplateStore, IConvenience {\\n    /// @notice A convenience method for the Airnode to set its parameters\\n    /// and forward the remaining funds in the master wallet to the Airnode\\n    /// admin\\n    /// @param admin Airnode admin\\n    /// @param xpub Master public key of the Airnode\\n    /// @param authorizers Authorizer contract addresses of the Airnode\\n    /// @return airnodeId Airnode ID from AirnodeParameterStore\\n    function setAirnodeParametersAndForwardFunds(\\n        address admin,\\n        string calldata xpub,\\n        address[] calldata authorizers\\n        )\\n        external\\n        payable\\n        override\\n        returns (bytes32 airnodeId)\\n    {\\n        airnodeId = setAirnodeParameters(\\n            admin,\\n            xpub,\\n            authorizers\\n            );\\n        if (msg.value > 0)\\n        {\\n            (bool success, ) = admin.call{ value: msg.value }(\\\"\\\");  // solhint-disable-line\\n            require(success, \\\"Transfer failed\\\");\\n        }\\n    }\\n\\n    /// @notice A convenience method to retrieve the Airnode parameters and\\n    /// the block number with a single call\\n    /// @param airnodeId Airnode ID from AirnodeParameterStore\\n    /// @return admin Airnode admin\\n    /// @return xpub Master public key of the Airnode\\n    /// @return authorizers Authorizer contract addresses of the Airnode\\n    /// @return blockNumber Block number\\n    function getAirnodeParametersAndBlockNumber(bytes32 airnodeId)\\n        external\\n        view\\n        override\\n        returns (\\n            address admin,\\n            string memory xpub,\\n            address[] memory authorizers,\\n            uint256 blockNumber\\n        )\\n    {\\n        AirnodeParameter storage airnodeParameter = airnodeParameters[airnodeId];\\n        admin = airnodeParameter.admin;\\n        xpub = airnodeParameter.xpub;\\n        authorizers = airnodeParameter.authorizers;\\n        blockNumber = block.number;\\n    }\\n\\n    /// @notice A convenience method to retrieve multiple templates with a\\n    /// single call\\n    /// @dev If this reverts, Airnode will use getTemplate() to get the\\n    /// templates individually\\n    /// @param templateIds Request template IDs from TemplateStore\\n    /// @return airnodeIds Array of Airnode IDs from AirnodeParameterStore\\n    /// @return endpointIds Array of endpoint IDs from EndpointStore\\n    /// @return parameters Array of request parameters\\n    function getTemplates(bytes32[] calldata templateIds)\\n        external\\n        view\\n        override\\n        returns (\\n            bytes32[] memory airnodeIds,\\n            bytes32[] memory endpointIds,\\n            bytes[] memory parameters\\n        )\\n    {\\n        airnodeIds = new bytes32[](templateIds.length);\\n        endpointIds = new bytes32[](templateIds.length);\\n        parameters = new bytes[](templateIds.length);\\n        for (uint256 ind = 0; ind < templateIds.length; ind++)\\n        {\\n            Template storage template = templates[templateIds[ind]];\\n            airnodeIds[ind] = template.airnodeId;\\n            endpointIds[ind] = template.endpointId;\\n            parameters[ind] = template.parameters;\\n        }\\n    }\\n\\n    /// @notice A convenience function to make multiple authorization status\\n    /// checks with a single call\\n    /// @dev If this reverts, Airnode will use checkAuthorizationStatus() to\\n    /// do the checks individually\\n    /// @param airnodeId Airnode ID from AirnodeParameterStore\\n    /// @param requestIds Request IDs\\n    /// @param endpointIds Endpoint IDs from EndpointStore\\n    /// @param requesterIndices Requester indices from RequesterStore\\n    /// @param designatedWallets Designated wallets\\n    /// @param clientAddresses Client addresses\\n    /// @return statuses Authorization statuses of the request\\n    function checkAuthorizationStatuses(\\n        bytes32 airnodeId,\\n        bytes32[] calldata requestIds,\\n        bytes32[] calldata endpointIds,\\n        uint256[] calldata requesterIndices,\\n        address[] calldata designatedWallets,\\n        address[] calldata clientAddresses\\n        )\\n        external\\n        view\\n        override\\n        returns (bool[] memory statuses)\\n    {\\n        require(\\n            requestIds.length == endpointIds.length\\n                && requestIds.length == requesterIndices.length\\n                && requestIds.length == designatedWallets.length\\n                && requestIds.length == clientAddresses.length,\\n            \\\"Unequal parameter lengths\\\"\\n        );\\n        statuses = new bool[](requestIds.length);\\n        for (uint256 ind = 0; ind < requestIds.length; ind++)\\n        {\\n            statuses[ind] = checkAuthorizationStatus(\\n                airnodeId,\\n                requestIds[ind],\\n                endpointIds[ind],\\n                requesterIndices[ind],\\n                designatedWallets[ind],\\n                clientAddresses[ind]\\n                );\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2403600282b78ad5598cee3c5397977416342997693d00be9ed020f42299c5bd\",\"license\":\"MIT\"},\"contracts/RequesterStore.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.4;\\n\\nimport \\\"./interfaces/IRequesterStore.sol\\\";\\n\\n/// @title The contract where the requesters are stored\\n/// @notice This contract is used by requesters to manage their endorsemenets.\\n/// A requester endorsing a client means that the client can request their\\n/// requests to be fulfilled by the respective requester's designated wallets.\\ncontract RequesterStore is IRequesterStore {\\n    mapping(uint256 => address) public requesterIndexToAdmin;\\n    mapping(uint256 => mapping(address => bool)) public requesterIndexToClientAddressToEndorsementStatus;\\n    mapping(address => uint256) public clientAddressToNoRequests;\\n    mapping(uint256 => uint256) public requesterIndexToNextWithdrawalRequestIndex;\\n    uint256 private noRequesters = 1;\\n\\n    /// @dev Reverts if the caller is not the requester admin\\n    /// @param requesterIndex Requester index\\n    modifier onlyRequesterAdmin(uint256 requesterIndex)\\n    {\\n        require(\\n            msg.sender == requesterIndexToAdmin[requesterIndex],\\n            \\\"Caller not requester admin\\\"\\n            );\\n        _;\\n    }\\n\\n    /// @notice Creates a requester with the given parameters, addressable by\\n    /// the index it returns\\n    /// @param admin Requester admin\\n    /// @return requesterIndex Requester index\\n    function createRequester(address admin)\\n        external\\n        override\\n        returns (uint256 requesterIndex)\\n    {\\n        requesterIndex = noRequesters++;\\n        requesterIndexToAdmin[requesterIndex] = admin;\\n        // Initialize the requester nonce during creation for consistent\\n        // withdrawal request gas cost\\n        requesterIndexToNextWithdrawalRequestIndex[requesterIndex] = 1;\\n        emit RequesterCreated(\\n            requesterIndex,\\n            admin\\n            );\\n    }\\n\\n    /// @notice Sets the requester admin\\n    /// @param requesterIndex Requester index\\n    /// @param admin Requester admin\\n    function setRequesterAdmin(\\n        uint256 requesterIndex,\\n        address admin\\n        )\\n        external\\n        override\\n        onlyRequesterAdmin(requesterIndex)\\n    {\\n        requesterIndexToAdmin[requesterIndex] = admin;\\n        emit RequesterUpdated(\\n            requesterIndex,\\n            admin\\n            );\\n    }\\n\\n    /// @notice Called by the requester admin to endorse a client, i.e., allow\\n    /// a client to use its designated wallets, or disendorse them\\n    /// @dev This is not Airnode-specific, i.e., the requester allows the\\n    /// client's requests to be fulfilled through its designated wallets across\\n    /// all Airnodes\\n    /// @param requesterIndex Requester index\\n    /// @param clientAddress Client address\\n    function setClientEndorsementStatus(\\n        uint256 requesterIndex,\\n        address clientAddress,\\n        bool endorsementStatus\\n        )\\n        external\\n        override\\n        onlyRequesterAdmin(requesterIndex)\\n    {\\n        // Initialize the client nonce for consistent request gas cost\\n        if (clientAddressToNoRequests[clientAddress] == 0)\\n        {\\n            clientAddressToNoRequests[clientAddress] = 1;\\n        }\\n        requesterIndexToClientAddressToEndorsementStatus[requesterIndex][clientAddress] = endorsementStatus;\\n        emit ClientEndorsementStatusSet(\\n            requesterIndex,\\n            clientAddress,\\n            endorsementStatus\\n            );\\n    }\\n}\\n\",\"keccak256\":\"0x630a7c0daa19c166587c80e514ddfa69911f9bf01f84ce89a3c38be0c34a2057\",\"license\":\"MIT\"},\"contracts/TemplateStore.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.4;\\n\\nimport \\\"./interfaces/ITemplateStore.sol\\\";\\n\\n/// @title The contract where the request templates are stored\\n/// @notice Most requests are repeated many times with the same parameters.\\n/// This contract allows the requester to announce their parameters once, then\\n/// refer to that announcement to make a request instead of passing the same\\n/// parameters repeatedly.\\ncontract TemplateStore is ITemplateStore {\\n    struct Template {\\n        bytes32 airnodeId;\\n        bytes32 endpointId;\\n        bytes parameters;\\n        }\\n\\n    mapping(bytes32 => Template) internal templates;\\n\\n    /// @notice Creates a request template with the given parameters,\\n    /// addressable by the ID it returns\\n    /// @dev A specific set of request parameters will always have\\n    /// the same ID. This means a few things: (1) You can compute the expected\\n    /// ID of a set of parameters off-chain, (2) creating a new template with\\n    /// the same parameters will overwrite the old one and return the same\\n    /// template ID, (3) after you query a template with its ID, you can verify\\n    /// its integrity by applying the hash and comparing the result with the\\n    /// ID.\\n    /// @param airnodeId Airnode ID from AirnodeParameterStore\\n    /// @param endpointId Endpoint ID from EndpointStore\\n    /// @param parameters Static request parameters (i.e., parameters that will\\n    /// not change between requests, unlike the dynamic parameters determined\\n    /// at request-time)\\n    /// @return templateId Request template ID\\n    function createTemplate(\\n        bytes32 airnodeId,\\n        bytes32 endpointId,\\n        bytes calldata parameters\\n        )\\n        external\\n        override\\n        returns (bytes32 templateId)\\n    {\\n        templateId = keccak256(abi.encode(\\n            airnodeId,\\n            endpointId,\\n            parameters\\n            ));\\n        templates[templateId] = Template({\\n            airnodeId: airnodeId,\\n            endpointId: endpointId,\\n            parameters: parameters\\n        });\\n        emit TemplateCreated(\\n          templateId,\\n          airnodeId,\\n          endpointId,\\n          parameters\\n          );\\n    }\\n\\n    /// @notice Retrieves the parameters of the request template addressed by\\n    /// the ID\\n    /// @param templateId Request template ID\\n    /// @return airnodeId Airnode ID from AirnodeParameterStore\\n    /// @return endpointId Endpoint ID from EndpointStore\\n    /// @return parameters Static request parameters (i.e., parameters that will\\n    /// not change between requests, unlike the dynamic parameters determined\\n    /// at request-time)\\n    function getTemplate(bytes32 templateId)\\n        external\\n        view\\n        override\\n        returns (\\n            bytes32 airnodeId,\\n            bytes32 endpointId,\\n            bytes memory parameters\\n        )\\n    {\\n        Template storage template = templates[templateId];\\n        airnodeId = template.airnodeId;\\n        endpointId = template.endpointId;\\n        parameters = template.parameters;\\n    }\\n}\\n\",\"keccak256\":\"0x2de8d98204c0b99421ae0eda4f1d65f3a8709807770df54e61a2b69627c07e27\",\"license\":\"MIT\"},\"contracts/authorizers/interfaces/IAuthorizer.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.4;\\n\\ninterface IAuthorizer {\\n    function authorizerType()\\n        external\\n        view\\n        returns (uint256);\\n\\n    function isAuthorized(\\n        bytes32 requestId,\\n        bytes32 airnodeId,\\n        bytes32 endpointId,\\n        uint256 requesterIndex,\\n        address designatedWallet,\\n        address clientAddress\\n        )\\n        external\\n        view\\n        returns (bool);\\n}\\n\",\"keccak256\":\"0x47e0ba64d7c8d5d0d5b7fb8b6548772904527463d98e0fa765acc169fde0422f\",\"license\":\"MIT\"},\"contracts/interfaces/IAirnodeParameterStore.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.4;\\n\\nimport \\\"./IRequesterStore.sol\\\";\\n\\ninterface IAirnodeParameterStore is IRequesterStore {\\n    event AirnodeParametersSet(\\n        bytes32 indexed airnodeId,\\n        address admin,\\n        string xpub,\\n        address[] authorizers\\n        );\\n\\n    event WithdrawalRequested(\\n        bytes32 indexed airnodeId,\\n        uint256 indexed requesterIndex,\\n        bytes32 indexed withdrawalRequestId,\\n        address designatedWallet,\\n        address destination\\n        );\\n\\n    event WithdrawalFulfilled(\\n        bytes32 indexed airnodeId,\\n        uint256 indexed requesterIndex,\\n        bytes32 indexed withdrawalRequestId,\\n        address designatedWallet,\\n        address destination,\\n        uint256 amount\\n        );\\n\\n    function setAirnodeParameters(\\n        address admin,\\n        string calldata xpub,\\n        address[] calldata authorizers\\n        )\\n        external\\n        payable\\n        returns (bytes32 airnodeId);\\n\\n    function requestWithdrawal(\\n        bytes32 airnodeId,\\n        uint256 requesterIndex,\\n        address designatedWallet,\\n        address destination\\n    )\\n        external;\\n\\n    function fulfillWithdrawal(\\n        bytes32 withdrawalRequestId,\\n        bytes32 airnodeId,\\n        uint256 requesterIndex,\\n        address destination\\n        )\\n        external\\n        payable;\\n\\n    function checkAuthorizationStatus(\\n        bytes32 airnodeId,\\n        bytes32 requestId,\\n        bytes32 endpointId,\\n        uint256 requesterIndex,\\n        address designatedWallet,\\n        address clientAddress\\n        )\\n        external\\n        view\\n        returns (bool status);\\n\\n    function getAirnodeParameters(bytes32 airnodeId)\\n        external\\n        view\\n        returns (\\n            address admin,\\n            string memory xpub,\\n            address[] memory authorizers\\n        );\\n}\\n\",\"keccak256\":\"0x40a02a9e4f832d545ffbc021c212e159663ae610b59e55ff9b8111d0908f7e86\",\"license\":\"MIT\"},\"contracts/interfaces/IAirnodeRrp.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.4;\\n\\nimport \\\"./IAirnodeParameterStore.sol\\\";\\nimport \\\"./ITemplateStore.sol\\\";\\n\\ninterface IAirnodeRrp is IAirnodeParameterStore, ITemplateStore {\\n    event ClientRequestCreated(\\n        bytes32 indexed airnodeId,\\n        bytes32 indexed requestId,\\n        uint256 noRequests,\\n        uint256 chainId,\\n        address clientAddress,\\n        bytes32 templateId,\\n        uint256 requesterIndex,\\n        address designatedWallet,\\n        address fulfillAddress,\\n        bytes4 fulfillFunctionId,\\n        bytes parameters\\n        );\\n\\n    event ClientFullRequestCreated(\\n        bytes32 indexed airnodeId,\\n        bytes32 indexed requestId,\\n        uint256 noRequests,\\n        uint256 chainId,\\n        address clientAddress,\\n        bytes32 endpointId,\\n        uint256 requesterIndex,\\n        address designatedWallet,\\n        address fulfillAddress,\\n        bytes4 fulfillFunctionId,\\n        bytes parameters\\n        );\\n\\n    event ClientRequestFulfilled(\\n        bytes32 indexed airnodeId,\\n        bytes32 indexed requestId,\\n        uint256 statusCode,\\n        bytes data\\n        );\\n\\n    event ClientRequestFailed(\\n        bytes32 indexed airnodeId,\\n        bytes32 indexed requestId\\n        );\\n\\n    function makeRequest(\\n        bytes32 templateId,\\n        uint256 requesterIndex,\\n        address designatedWallet,\\n        address fulfillAddress,\\n        bytes4 fulfillFunctionId,\\n        bytes calldata parameters\\n        )\\n        external\\n        returns (bytes32 requestId);\\n\\n    function makeFullRequest(\\n        bytes32 airnodeId,\\n        bytes32 endpointId,\\n        uint256 requesterIndex,\\n        address designatedWallet,\\n        address fulfillAddress,\\n        bytes4 fulfillFunctionId,\\n        bytes calldata parameters\\n        )\\n        external\\n        returns (bytes32 requestId);\\n\\n    function fulfill(\\n        bytes32 requestId,\\n        bytes32 airnodeId,\\n        uint256 statusCode,\\n        bytes calldata data,\\n        address fulfillAddress,\\n        bytes4 fulfillFunctionId\\n        )\\n        external\\n        returns (\\n            bool callSuccess,\\n            bytes memory callData\\n        );\\n\\n    function fail(\\n        bytes32 requestId,\\n        bytes32 airnodeId,\\n        address fulfillAddress,\\n        bytes4 fulfillFunctionId\\n        )\\n        external;\\n}\\n\",\"keccak256\":\"0xd7bca275869c55b668de281b1a954850cfd4556e52ee8a9d6fe518b99c2a771c\",\"license\":\"MIT\"},\"contracts/interfaces/IConvenience.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.4;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"./IAirnodeRrp.sol\\\";\\n\\ninterface IConvenience {\\n    function setAirnodeParametersAndForwardFunds(\\n        address admin,\\n        string calldata xpub,\\n        address[] calldata authorizers\\n        )\\n        external\\n        payable\\n        returns (bytes32 airnodeId);\\n\\n    function getAirnodeParametersAndBlockNumber(bytes32 airnodeId)\\n        external\\n        view\\n        returns (\\n            address admin,\\n            string memory xpub,\\n            address[] memory authorizers,\\n            uint256 blockNumber\\n        );\\n\\n    function getTemplates(bytes32[] calldata templateIds)\\n        external\\n        view\\n        returns (\\n            bytes32[] memory airnodeIds,\\n            bytes32[] memory endpointIds,\\n            bytes[] memory parameters\\n        );\\n\\n    function checkAuthorizationStatuses(\\n        bytes32 airnodeId,\\n        bytes32[] calldata requestIds, \\n        bytes32[] calldata endpointIds,\\n        uint256[] calldata requesterIndices,\\n        address[] calldata designatedWallets,\\n        address[] calldata clientAddresses\\n        )\\n        external\\n        view\\n        returns (bool[] memory statuses);\\n}\\n\",\"keccak256\":\"0x2cd107212426d7448427c0e574d380ec4613f99ce12b4804d36d21d692287fb9\",\"license\":\"MIT\"},\"contracts/interfaces/IRequesterStore.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.4;\\n\\ninterface IRequesterStore {\\n    event RequesterCreated(\\n        uint256 indexed requesterIndex,\\n        address admin\\n        );\\n\\n    event RequesterUpdated(\\n        uint256 indexed requesterIndex,\\n        address admin\\n        );\\n\\n    event ClientEndorsementStatusSet(\\n        uint256 indexed requesterIndex,\\n        address indexed clientAddress,\\n        bool endorsementStatus\\n        );\\n\\n    function createRequester(address admin)\\n        external\\n        returns (uint256 requesterIndex);\\n\\n    function setRequesterAdmin(\\n        uint256 requesterIndex,\\n        address admin\\n        )\\n        external;\\n\\n    function setClientEndorsementStatus(\\n        uint256 requesterIndex,\\n        address clientAddress,\\n        bool endorsementStatus\\n        )\\n        external;\\n}\\n\",\"keccak256\":\"0xb3cf204e62b31bb5ceef0e27483712dc2f1b86020c17a331debb69d85783d266\",\"license\":\"MIT\"},\"contracts/interfaces/ITemplateStore.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.4;\\n\\ninterface ITemplateStore {\\n    event TemplateCreated(\\n        bytes32 indexed templateId,\\n        bytes32 airnodeId,\\n        bytes32 endpointId,\\n        bytes parameters\\n        );\\n\\n    function createTemplate(\\n        bytes32 airnodeId,\\n        bytes32 endpointId,\\n        bytes calldata parameters\\n        )\\n        external\\n        returns (bytes32 templateId);\\n\\n    function getTemplate(bytes32 templateId)\\n        external\\n        view\\n        returns (\\n            bytes32 airnodeId,\\n            bytes32 endpointId,\\n            bytes memory parameters\\n        );\\n}\\n\",\"keccak256\":\"0x9b4c6f968ae6823fb568f5e386cb1c2363c6eb0dd313daa4ed72a689938c67e7\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x6080604052600160045534801561001557600080fd5b50613fc7806100256000396000f3fe6080604052600436106101405760003560e01c80639949f14b116100b6578063ccd761011161006f578063ccd76101146104de578063cd59cafd1461051b578063d76071061461054b578063dcb02fe214610588578063dce9c276146105c5578063fde19cf51461060257610140565b80639949f14b146103b9578063a5d1e727146103f6578063ac003a6f1461041f578063ba91edde1461045c578063bf0aa8c714610499578063c2534fce146104c257610140565b80632edc5dc7116101085780632edc5dc71461026857806332ec10771461029157806334989ad0146102ce57806376428c9b1461030b5780637d15f0781461034a5780639757739b1461037a57610140565b80631a0d5a0214610145578063258c1691146101855780632b5dfc7e146101ae5780632c69d986146101eb5780632d72a6e51461022a575b600080fd5b34801561015157600080fd5b5061016c60048036038101906101679190612910565b61063f565b60405161017c9493929190613681565b60405180910390f35b34801561019157600080fd5b506101ac60048036038101906101a79190612ea1565b6107a8565b005b3480156101ba57600080fd5b506101d560048036038101906101d09190612e78565b6108d7565b6040516101e29190613578565b60405180910390f35b3480156101f757600080fd5b50610212600480360381019061020d9190612910565b61090a565b6040516102219392919061363c565b60405180910390f35b34801561023657600080fd5b50610251600480360381019061024c9190612cc7565b610a6f565b60405161025f92919061375d565b60405180910390f35b34801561027457600080fd5b5061028f600480360381019061028a9190612a52565b610c46565b005b34801561029d57600080fd5b506102b860048036038101906102b391906127f0565b610d4c565b6040516102c59190613987565b60405180910390f35b3480156102da57600080fd5b506102f560048036038101906102f09190612dd1565b610e0e565b604051610302919061378d565b60405180910390f35b34801561031757600080fd5b50610332600480360381019061032d91906128a2565b611030565b604051610341939291906136f6565b60405180910390f35b610364600480360381019061035f9190612819565b61137b565b604051610371919061378d565b60405180910390f35b34801561038657600080fd5b506103a1600480360381019061039c9190612910565b61153c565b6040516103b093929190613849565b60405180910390f35b3480156103c557600080fd5b506103e060048036038101906103db9190612910565b6115fd565b6040516103ed9190613742565b60405180910390f35b34801561040257600080fd5b5061041d60048036038101906104189190612edd565b61161d565b005b34801561042b57600080fd5b5061044660048036038101906104419190612e78565b611809565b6040516104539190613987565b60405180910390f35b34801561046857600080fd5b50610483600480360381019061047e9190612ea1565b611821565b6040516104909190613742565b60405180910390f35b3480156104a557600080fd5b506104c060048036038101906104bb9190612d6e565b611850565b005b6104dc60048036038101906104d79190612baa565b6119d5565b005b3480156104ea57600080fd5b5061050560048036038101906105009190612ab5565b611b64565b6040516105129190613742565b60405180910390f35b61053560048036038101906105309190612819565b611d6e565b604051610542919061378d565b60405180910390f35b34801561055757600080fd5b50610572600480360381019061056d9190612939565b611e3f565b60405161057f91906136d4565b60405180910390f35b34801561059457600080fd5b506105af60048036038101906105aa9190612b3e565b612111565b6040516105bc919061378d565b60405180910390f35b3480156105d157600080fd5b506105ec60048036038101906105e79190612c0d565b61222e565b6040516105f9919061378d565b60405180910390f35b34801561060e57600080fd5b50610629600480360381019061062491906127f0565b612435565b6040516106369190613987565b60405180910390f35b60006060806000806005600087815260200190815260200160002090508060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16945080600101805461069290613cec565b80601f01602080910402602001604051908101604052809291908181526020018280546106be90613cec565b801561070b5780601f106106e05761010080835404028352916020019161070b565b820191906000526020600020905b8154815290600101906020018083116106ee57829003601f168201915b505050505093508060020180548060200260200160405190810160405280929190818152602001828054801561079657602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001906001019080831161074c575b50505050509250439150509193509193565b8160008082815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610849576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610840906138e7565b60405180910390fd5b8160008085815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550827fde26d3d8fc98a8dab0df21ef2146d313da1a060d635f3ce9b42adab32fa992aa836040516108ca9190613578565b60405180910390a2505050565b60006020528060005260406000206000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600060608060006005600086815260200190815260200160002090508060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16935080600101805461095c90613cec565b80601f016020809104026020016040519081016040528092919081815260200182805461098890613cec565b80156109d55780601f106109aa576101008083540402835291602001916109d5565b820191906000526020600020905b8154815290600101906020018083116109b857829003601f168201915b5050505050925080600201805480602002602001604051908101604052809291908181526020018280548015610a6057602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019060010190808311610a16575b50505050509150509193909250565b6000606088888585600083338484604051602001610a909493929190613473565b60405160208183030381529060405280519060200120905060086000868152602001908152602001600020548114610afd576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610af490613907565b60405180910390fd5b600860008f8152602001908152602001600020600090558d8d7fcde46e28d8d3e348e5f5b4fcc511fe3b1f9b0f549cd8332f0da31802a6f2bf618e8e8e604051610b49939291906139a2565b60405180910390a38873ffffffffffffffffffffffffffffffffffffffff16888f8e8e8e604051602401610b809493929190613887565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050604051610bea919061350f565b6000604051808303816000865af19150503d8060008114610c27576040519150601f19603f3d011682016040523d82523d6000602084013e610c2c565b606091505b508097508198505050505050505097509795505050505050565b83838383600083338484604051602001610c639493929190613473565b60405160208183030381529060405280519060200120905060086000868152602001908152602001600020548114610cd0576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610cc790613907565b60405180910390fd5b600860008a8152602001908152602001600020600090556001600960008b815260200190815260200160002060006101000a81548160ff02191690831515021790555088887f1cfdd5ace64f15111ef8ed9df04364d0e9a9165cccf8386109347e54661ba3ad60405160405180910390a3505050505050505050565b600060046000815480929190610d6190613d1e565b9190505590508160008083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060016003600083815260200190815260200160002081905550807f59e98f4c18a6c92efe8c23bcbd74f0d71e271eebf9a95f9edefdbee17c01f27083604051610e019190613578565b60405180910390a2919050565b60006001600088815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16610ead576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ea490613967565b60405180910390fd5b6000600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490508046338b8787604051602001610f0c969594939291906139d4565b6040516020818303038152906040528051906020012091506000600760008b815260200190815260200160002060000154905080888888604051602001610f569493929190613473565b60405160208183030381529060405280519060200120600860008581526020019081526020016000208190555082817f8339fddbb81e588a9ed04dec82ee9ae6c7a185f44835adaaa2ace50ce3a14aaf8446338f8f8f8f8f8f8f604051610fc69a99989796959493929190613a30565b60405180910390a3600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600081548092919061101e90613d1e565b91905055505050979650505050505050565b60608060608484905067ffffffffffffffff811115611078577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6040519080825280602002602001820160405280156110a65781602001602082028036833780820191505090505b5092508484905067ffffffffffffffff8111156110ec577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b60405190808252806020026020018201604052801561111a5781602001602082028036833780820191505090505b5091508484905067ffffffffffffffff811115611160577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b60405190808252806020026020018201604052801561119357816020015b606081526020019060019003908161117e5790505b50905060005b85859050811015611373576000600760008888858181106111e3577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b90506020020135815260200190815260200160002090508060000154858381518110611238577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6020026020010181815250508060010154848381518110611282577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200260200101818152505080600201805461129d90613cec565b80601f01602080910402602001604051908101604052809291908181526020018280546112c990613cec565b80156113165780601f106112eb57610100808354040283529160200191611316565b820191906000526020600020905b8154815290600101906020018083116112f957829003601f168201915b5050505050838381518110611354577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001018190525050808061136b90613d1e565b915050611199565b509250925092565b60003360405160200161138e9190613578565b60405160208183030381529060405280519060200120905060405180606001604052808773ffffffffffffffffffffffffffffffffffffffff16815260200186868080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050508152602001848480806020026020016040519081016040528093929190818152602001838360200280828437600081840152601f19601f820116905080830192505050505050508152506005600083815260200190815260200160002060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060208201518160010190805190602001906114d292919061244d565b5060408201518160020190805190602001906114ef9291906124d3565b50905050807fcee45ff00381d88710040af9bd1c13ee3176f83efd36b33f2330cca74e53000b878787878760405161152b9594939291906135f3565b60405180910390a295945050505050565b60008060606000600760008681526020019081526020016000209050806000015493508060010154925080600201805461157590613cec565b80601f01602080910402602001604051908101604052809291908181526020018280546115a190613cec565b80156115ee5780601f106115c3576101008083540402835291602001916115ee565b820191906000526020600020905b8154815290600101906020018083116115d157829003601f168201915b50505050509150509193909250565b60096020528060005260406000206000915054906101000a900460ff1681565b8260008082815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146116be576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016116b5906138e7565b60405180910390fd5b6000600260008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054141561174c576001600260008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505b816001600086815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508273ffffffffffffffffffffffffffffffffffffffff16847fd859fb74ec5a83da09d56bb4211667f87fc36cdec8ccdd9ddc7115c99923e75e846040516117fb9190613742565b60405180910390a350505050565b60036020528060005260406000206000915090505481565b60016020528160005260406000206020528060005260406000206000915091509054906101000a900460ff1681565b8260008082815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146118f1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016118e8906138e7565b60405180910390fd5b600060036000868152602001908152602001600020600081548092919061191790613d1e565b91905055468660405160200161192f9392919061353b565b60405160208183030381529060405280519060200120905060008686868660405160200161196094939291906134c1565b6040516020818303038152906040528051906020012090508060066000848152602001908152602001600020819055508186887f3d0ebccb4fc9730699221da0180970852f595ed5c78781346149123cbbe9f1d388886040516119c4929190613593565b60405180910390a450505050505050565b6000838333846040516020016119ee94939291906134c1565b60405160208183030381529060405280519060200120905080600660008781526020019081526020016000205414611a5b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611a5290613927565b60405180910390fd5b60066000868152602001908152602001600020600090558483857f9e7b58b29aa3b972bb0f457499d0dfd00bf23905b0c3358fb864e7120402aefa338634604051611aa8939291906135bc565b60405180910390a460008273ffffffffffffffffffffffffffffffffffffffff1634604051611ad690613526565b60006040518083038185875af1925050503d8060008114611b13576040519150601f19603f3d011682016040523d82523d6000602084013e611b18565b606091505b5050905080611b5c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611b53906138c7565b60405180910390fd5b505050505050565b60008060056000898152602001908152602001600020600201805480602002602001604051908101604052809291908181526020018280548015611bfd57602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019060010190808311611bb3575b5050505050905060008151905060005b81811015611d5c576000838281518110611c50577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200260200101519050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415611c9c576001945050505050611d64565b60008190508073ffffffffffffffffffffffffffffffffffffffff1663066645478c8e8d8d8d8d6040518763ffffffff1660e01b8152600401611ce4969594939291906137a8565b60206040518083038186803b158015611cfc57600080fd5b505afa158015611d10573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d3491906128e7565b15611d4757600195505050505050611d64565b50508080611d5490613d1e565b915050611c0d565b506000925050505b9695505050505050565b6000611d7d868686868661137b565b90506000341115611e365760008673ffffffffffffffffffffffffffffffffffffffff1634604051611dae90613526565b60006040518083038185875af1925050503d8060008114611deb576040519150601f19603f3d011682016040523d82523d6000602084013e611df0565b606091505b5050905080611e34576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611e2b906138c7565b60405180910390fd5b505b95945050505050565b6060888890508b8b9050148015611e5b5750868690508b8b9050145b8015611e6c5750848490508b8b9050145b8015611e7d5750828290508b8b9050145b611ebc576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611eb390613947565b60405180910390fd5b8a8a905067ffffffffffffffff811115611eff577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b604051908082528060200260200182016040528015611f2d5781602001602082028036833780820191505090505b50905060005b8b8b9050811015612101576120a38d8d8d84818110611f7b577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b905060200201358c8c85818110611fbb577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b905060200201358b8b86818110611ffb577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b905060200201358a8a8781811061203b577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b905060200201602081019061205091906127f0565b898988818110612089577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b905060200201602081019061209e91906127f0565b611b64565b8282815181106120dc577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200260200101901515908115158152505080806120f990613d1e565b915050611f33565b509b9a5050505050505050505050565b60008484848460405160200161212a9493929190613809565b604051602081830303815290604052805190602001209050604051806060016040528086815260200185815260200184848080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f8201169050808301925050505050505081525060076000838152602001908152602001600020600082015181600001556020820151816001015560408201518160020190805190602001906121e492919061255d565b50905050807fa3c44778bf2c4729d112c7eeee01a2a79be70e58e3fe0b2a25d6c3562f73ab838686868660405161221e9493929190613809565b60405180910390a2949350505050565b60006001600088815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff166122cd576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016122c490613967565b60405180910390fd5b6000600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490508046338b878760405160200161232c969594939291906139d4565b6040516020818303038152906040528051906020012091508987878760405160200161235b9493929190613473565b604051602081830303815290604052805190602001206008600084815260200190815260200160002081905550818a7fe8ae99161b1547fd1c6ff3cb9660293fa4cd770fd52f72ff0362d64d8bccc08e8346338e8e8e8e8e8e8e6040516123cb9a99989796959493929190613a30565b60405180910390a3600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600081548092919061242390613d1e565b91905055505098975050505050505050565b60026020528060005260406000206000915090505481565b82805461245990613cec565b90600052602060002090601f01602090048101928261247b57600085556124c2565b82601f1061249457805160ff19168380011785556124c2565b828001600101855582156124c2579182015b828111156124c15782518255916020019190600101906124a6565b5b5090506124cf91906125e3565b5090565b82805482825590600052602060002090810192821561254c579160200282015b8281111561254b5782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550916020019190600101906124f3565b5b50905061255991906125e3565b5090565b82805461256990613cec565b90600052602060002090601f01602090048101928261258b57600085556125d2565b82601f106125a457805160ff19168380011785556125d2565b828001600101855582156125d2579182015b828111156125d15782518255916020019190600101906125b6565b5b5090506125df91906125e3565b5090565b5b808211156125fc5760008160009055506001016125e4565b5090565b60008135905061260f81613f1e565b92915050565b60008083601f84011261262757600080fd5b8235905067ffffffffffffffff81111561264057600080fd5b60208301915083602082028301111561265857600080fd5b9250929050565b60008083601f84011261267157600080fd5b8235905067ffffffffffffffff81111561268a57600080fd5b6020830191508360208202830111156126a257600080fd5b9250929050565b60008083601f8401126126bb57600080fd5b8235905067ffffffffffffffff8111156126d457600080fd5b6020830191508360208202830111156126ec57600080fd5b9250929050565b60008135905061270281613f35565b92915050565b60008151905061271781613f35565b92915050565b60008135905061272c81613f4c565b92915050565b60008135905061274181613f63565b92915050565b60008083601f84011261275957600080fd5b8235905067ffffffffffffffff81111561277257600080fd5b60208301915083600182028301111561278a57600080fd5b9250929050565b60008083601f8401126127a357600080fd5b8235905067ffffffffffffffff8111156127bc57600080fd5b6020830191508360018202830111156127d457600080fd5b9250929050565b6000813590506127ea81613f7a565b92915050565b60006020828403121561280257600080fd5b600061281084828501612600565b91505092915050565b60008060008060006060868803121561283157600080fd5b600061283f88828901612600565b955050602086013567ffffffffffffffff81111561285c57600080fd5b61286888828901612791565b9450945050604086013567ffffffffffffffff81111561288757600080fd5b61289388828901612615565b92509250509295509295909350565b600080602083850312156128b557600080fd5b600083013567ffffffffffffffff8111156128cf57600080fd5b6128db8582860161265f565b92509250509250929050565b6000602082840312156128f957600080fd5b600061290784828501612708565b91505092915050565b60006020828403121561292257600080fd5b60006129308482850161271d565b91505092915050565b600080600080600080600080600080600060c08c8e03121561295a57600080fd5b60006129688e828f0161271d565b9b505060208c013567ffffffffffffffff81111561298557600080fd5b6129918e828f0161265f565b9a509a505060408c013567ffffffffffffffff8111156129b057600080fd5b6129bc8e828f0161265f565b985098505060608c013567ffffffffffffffff8111156129db57600080fd5b6129e78e828f016126a9565b965096505060808c013567ffffffffffffffff811115612a0657600080fd5b612a128e828f01612615565b945094505060a08c013567ffffffffffffffff811115612a3157600080fd5b612a3d8e828f01612615565b92509250509295989b509295989b9093969950565b60008060008060808587031215612a6857600080fd5b6000612a768782880161271d565b9450506020612a878782880161271d565b9350506040612a9887828801612600565b9250506060612aa987828801612732565b91505092959194509250565b60008060008060008060c08789031215612ace57600080fd5b6000612adc89828a0161271d565b9650506020612aed89828a0161271d565b9550506040612afe89828a0161271d565b9450506060612b0f89828a016127db565b9350506080612b2089828a01612600565b92505060a0612b3189828a01612600565b9150509295509295509295565b60008060008060608587031215612b5457600080fd5b6000612b628782880161271d565b9450506020612b738782880161271d565b935050604085013567ffffffffffffffff811115612b9057600080fd5b612b9c87828801612747565b925092505092959194509250565b60008060008060808587031215612bc057600080fd5b6000612bce8782880161271d565b9450506020612bdf8782880161271d565b9350506040612bf0878288016127db565b9250506060612c0187828801612600565b91505092959194509250565b60008060008060008060008060e0898b031215612c2957600080fd5b6000612c378b828c0161271d565b9850506020612c488b828c0161271d565b9750506040612c598b828c016127db565b9650506060612c6a8b828c01612600565b9550506080612c7b8b828c01612600565b94505060a0612c8c8b828c01612732565b93505060c089013567ffffffffffffffff811115612ca957600080fd5b612cb58b828c01612747565b92509250509295985092959890939650565b600080600080600080600060c0888a031215612ce257600080fd5b6000612cf08a828b0161271d565b9750506020612d018a828b0161271d565b9650506040612d128a828b016127db565b955050606088013567ffffffffffffffff811115612d2f57600080fd5b612d3b8a828b01612747565b94509450506080612d4e8a828b01612600565b92505060a0612d5f8a828b01612732565b91505092959891949750929550565b60008060008060808587031215612d8457600080fd5b6000612d928782880161271d565b9450506020612da3878288016127db565b9350506040612db487828801612600565b9250506060612dc587828801612600565b91505092959194509250565b600080600080600080600060c0888a031215612dec57600080fd5b6000612dfa8a828b0161271d565b9750506020612e0b8a828b016127db565b9650506040612e1c8a828b01612600565b9550506060612e2d8a828b01612600565b9450506080612e3e8a828b01612732565b93505060a088013567ffffffffffffffff811115612e5b57600080fd5b612e678a828b01612747565b925092505092959891949750929550565b600060208284031215612e8a57600080fd5b6000612e98848285016127db565b91505092915050565b60008060408385031215612eb457600080fd5b6000612ec2858286016127db565b9250506020612ed385828601612600565b9150509250929050565b600080600060608486031215612ef257600080fd5b6000612f00868287016127db565b9350506020612f1186828701612600565b9250506040612f22868287016126f3565b9150509250925092565b6000612f388383612f88565b60208301905092915050565b6000612f5083836131a9565b60208301905092915050565b6000612f6883836131c7565b60208301905092915050565b6000612f80838361324f565b905092915050565b612f9181613c2c565b82525050565b612fa081613c2c565b82525050565b612fb7612fb282613c2c565b613d67565b82525050565b6000612fc98385613b93565b9350612fd482613ac6565b8060005b8581101561300d57612fea8284613c15565b612ff48882612f2c565b9750612fff83613b52565b925050600181019050612fd8565b5085925050509392505050565b600061302582613b10565b61302f8185613b93565b935061303a83613ad0565b8060005b8381101561306b5781516130528882612f2c565b975061305d83613b5f565b92505060018101905061303e565b5085935050505092915050565b600061308382613b1b565b61308d8185613ba4565b935061309883613ae0565b8060005b838110156130c95781516130b08882612f44565b97506130bb83613b6c565b92505060018101905061309c565b5085935050505092915050565b60006130e182613b26565b6130eb8185613bb5565b93506130f683613af0565b8060005b8381101561312757815161310e8882612f5c565b975061311983613b79565b9250506001810190506130fa565b5085935050505092915050565b600061313f82613b31565b6131498185613bc6565b93508360208202850161315b85613b00565b8060005b8581101561319757848403895281516131788582612f74565b945061318383613b86565b925060208a0199505060018101905061315f565b50829750879550505050505092915050565b6131b281613c3e565b82525050565b6131c181613c3e565b82525050565b6131d081613c4a565b82525050565b6131df81613c4a565b82525050565b6131f66131f182613c4a565b613d79565b82525050565b61320581613c54565b82525050565b61321c61321782613c54565b613d83565b82525050565b600061322e8385613be8565b935061323b838584613caa565b61324483613e07565b840190509392505050565b600061325a82613b3c565b6132648185613bd7565b9350613274818560208601613cb9565b61327d81613e07565b840191505092915050565b600061329382613b3c565b61329d8185613be8565b93506132ad818560208601613cb9565b6132b681613e07565b840191505092915050565b60006132cc82613b3c565b6132d68185613bf9565b93506132e6818560208601613cb9565b80840191505092915050565b60006132fe8385613c04565b935061330b838584613caa565b61331483613e07565b840190509392505050565b600061332a82613b47565b6133348185613c04565b9350613344818560208601613cb9565b61334d81613e07565b840191505092915050565b6000613365600f83613c04565b915061337082613e25565b602082019050919050565b6000613388601a83613c04565b915061339382613e4e565b602082019050919050565b60006133ab600f83613c04565b91506133b682613e77565b602082019050919050565b60006133ce601a83613c04565b91506133d982613ea0565b602082019050919050565b60006133f1601983613c04565b91506133fc82613ec9565b602082019050919050565b6000613414600083613bf9565b915061341f82613ef2565b600082019050919050565b6000613437602083613c04565b915061344282613ef5565b602082019050919050565b61345681613ca0565b82525050565b61346d61346882613ca0565b613d9f565b82525050565b600061347f82876131e5565b60208201915061348f8286612fa6565b60148201915061349f8285612fa6565b6014820191506134af828461320b565b60048201915081905095945050505050565b60006134cd82876131e5565b6020820191506134dd828661345c565b6020820191506134ed8285612fa6565b6014820191506134fd8284612fa6565b60148201915081905095945050505050565b600061351b82846132c1565b915081905092915050565b600061353182613407565b9150819050919050565b6000613547828661345c565b602082019150613557828561345c565b602082019150613567828461345c565b602082019150819050949350505050565b600060208201905061358d6000830184612f97565b92915050565b60006040820190506135a86000830185612f97565b6135b56020830184612f97565b9392505050565b60006060820190506135d16000830186612f97565b6135de6020830185612f97565b6135eb604083018461344d565b949350505050565b60006060820190506136086000830188612f97565b818103602083015261361b8186886132f2565b90508181036040830152613630818486612fbd565b90509695505050505050565b60006060820190506136516000830186612f97565b8181036020830152613663818561331f565b90508181036040830152613677818461301a565b9050949350505050565b60006080820190506136966000830187612f97565b81810360208301526136a8818661331f565b905081810360408301526136bc818561301a565b90506136cb606083018461344d565b95945050505050565b600060208201905081810360008301526136ee8184613078565b905092915050565b6000606082019050818103600083015261371081866130d6565b9050818103602083015261372481856130d6565b905081810360408301526137388184613134565b9050949350505050565b600060208201905061375760008301846131b8565b92915050565b600060408201905061377260008301856131b8565b81810360208301526137848184613288565b90509392505050565b60006020820190506137a260008301846131d6565b92915050565b600060c0820190506137bd60008301896131d6565b6137ca60208301886131d6565b6137d760408301876131d6565b6137e4606083018661344d565b6137f16080830185612f97565b6137fe60a0830184612f97565b979650505050505050565b600060608201905061381e60008301876131d6565b61382b60208301866131d6565b818103604083015261383e818486613222565b905095945050505050565b600060608201905061385e60008301866131d6565b61386b60208301856131d6565b818103604083015261387d8184613288565b9050949350505050565b600060608201905061389c60008301876131d6565b6138a9602083018661344d565b81810360408301526138bc818486613222565b905095945050505050565b600060208201905081810360008301526138e081613358565b9050919050565b600060208201905081810360008301526139008161337b565b9050919050565b600060208201905081810360008301526139208161339e565b9050919050565b60006020820190508181036000830152613940816133c1565b9050919050565b60006020820190508181036000830152613960816133e4565b9050919050565b600060208201905081810360008301526139808161342a565b9050919050565b600060208201905061399c600083018461344d565b92915050565b60006040820190506139b7600083018661344d565b81810360208301526139ca818486613222565b9050949350505050565b600060a0820190506139e9600083018961344d565b6139f6602083018861344d565b613a036040830187612f97565b613a1060608301866131d6565b8181036080830152613a23818486613222565b9050979650505050505050565b600061012082019050613a46600083018d61344d565b613a53602083018c61344d565b613a60604083018b612f97565b613a6d606083018a6131d6565b613a7a608083018961344d565b613a8760a0830188612f97565b613a9460c0830187612f97565b613aa160e08301866131fc565b818103610100830152613ab5818486613222565b90509b9a5050505050505050505050565b6000819050919050565b6000819050602082019050919050565b6000819050602082019050919050565b6000819050602082019050919050565b6000819050602082019050919050565b600081519050919050565b600081519050919050565b600081519050919050565b600081519050919050565b600081519050919050565b600081519050919050565b6000602082019050919050565b6000602082019050919050565b6000602082019050919050565b6000602082019050919050565b6000602082019050919050565b600082825260208201905092915050565b600082825260208201905092915050565b600082825260208201905092915050565b600082825260208201905092915050565b600082825260208201905092915050565b600082825260208201905092915050565b600081905092915050565b600082825260208201905092915050565b6000613c246020840184612600565b905092915050565b6000613c3782613c80565b9050919050565b60008115159050919050565b6000819050919050565b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b82818337600083830152505050565b60005b83811015613cd7578082015181840152602081019050613cbc565b83811115613ce6576000848401525b50505050565b60006002820490506001821680613d0457607f821691505b60208210811415613d1857613d17613dd8565b5b50919050565b6000613d2982613ca0565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415613d5c57613d5b613da9565b5b600182019050919050565b6000613d7282613d8d565b9050919050565b6000819050919050565b6000819050919050565b6000613d9882613e18565b9050919050565b6000819050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6000601f19601f8301169050919050565b60008160601b9050919050565b7f5472616e73666572206661696c65640000000000000000000000000000000000600082015250565b7f43616c6c6572206e6f74207265717565737465722061646d696e000000000000600082015250565b7f4e6f207375636820726571756573740000000000000000000000000000000000600082015250565b7f4e6f2073756368207769746864726177616c2072657175657374000000000000600082015250565b7f556e657175616c20706172616d65746572206c656e6774687300000000000000600082015250565b50565b7f436c69656e74206e6f7420656e646f7273656420627920726571756573746572600082015250565b613f2781613c2c565b8114613f3257600080fd5b50565b613f3e81613c3e565b8114613f4957600080fd5b50565b613f5581613c4a565b8114613f6057600080fd5b50565b613f6c81613c54565b8114613f7757600080fd5b50565b613f8381613ca0565b8114613f8e57600080fd5b5056fea26469706673582212206572401b0561ed435aa847415982737eab1e8ae701bf1f405f1f114a37d593b864736f6c63430008040033",
  "deployedBytecode": "0x6080604052600436106101405760003560e01c80639949f14b116100b6578063ccd761011161006f578063ccd76101146104de578063cd59cafd1461051b578063d76071061461054b578063dcb02fe214610588578063dce9c276146105c5578063fde19cf51461060257610140565b80639949f14b146103b9578063a5d1e727146103f6578063ac003a6f1461041f578063ba91edde1461045c578063bf0aa8c714610499578063c2534fce146104c257610140565b80632edc5dc7116101085780632edc5dc71461026857806332ec10771461029157806334989ad0146102ce57806376428c9b1461030b5780637d15f0781461034a5780639757739b1461037a57610140565b80631a0d5a0214610145578063258c1691146101855780632b5dfc7e146101ae5780632c69d986146101eb5780632d72a6e51461022a575b600080fd5b34801561015157600080fd5b5061016c60048036038101906101679190612910565b61063f565b60405161017c9493929190613681565b60405180910390f35b34801561019157600080fd5b506101ac60048036038101906101a79190612ea1565b6107a8565b005b3480156101ba57600080fd5b506101d560048036038101906101d09190612e78565b6108d7565b6040516101e29190613578565b60405180910390f35b3480156101f757600080fd5b50610212600480360381019061020d9190612910565b61090a565b6040516102219392919061363c565b60405180910390f35b34801561023657600080fd5b50610251600480360381019061024c9190612cc7565b610a6f565b60405161025f92919061375d565b60405180910390f35b34801561027457600080fd5b5061028f600480360381019061028a9190612a52565b610c46565b005b34801561029d57600080fd5b506102b860048036038101906102b391906127f0565b610d4c565b6040516102c59190613987565b60405180910390f35b3480156102da57600080fd5b506102f560048036038101906102f09190612dd1565b610e0e565b604051610302919061378d565b60405180910390f35b34801561031757600080fd5b50610332600480360381019061032d91906128a2565b611030565b604051610341939291906136f6565b60405180910390f35b610364600480360381019061035f9190612819565b61137b565b604051610371919061378d565b60405180910390f35b34801561038657600080fd5b506103a1600480360381019061039c9190612910565b61153c565b6040516103b093929190613849565b60405180910390f35b3480156103c557600080fd5b506103e060048036038101906103db9190612910565b6115fd565b6040516103ed9190613742565b60405180910390f35b34801561040257600080fd5b5061041d60048036038101906104189190612edd565b61161d565b005b34801561042b57600080fd5b5061044660048036038101906104419190612e78565b611809565b6040516104539190613987565b60405180910390f35b34801561046857600080fd5b50610483600480360381019061047e9190612ea1565b611821565b6040516104909190613742565b60405180910390f35b3480156104a557600080fd5b506104c060048036038101906104bb9190612d6e565b611850565b005b6104dc60048036038101906104d79190612baa565b6119d5565b005b3480156104ea57600080fd5b5061050560048036038101906105009190612ab5565b611b64565b6040516105129190613742565b60405180910390f35b61053560048036038101906105309190612819565b611d6e565b604051610542919061378d565b60405180910390f35b34801561055757600080fd5b50610572600480360381019061056d9190612939565b611e3f565b60405161057f91906136d4565b60405180910390f35b34801561059457600080fd5b506105af60048036038101906105aa9190612b3e565b612111565b6040516105bc919061378d565b60405180910390f35b3480156105d157600080fd5b506105ec60048036038101906105e79190612c0d565b61222e565b6040516105f9919061378d565b60405180910390f35b34801561060e57600080fd5b50610629600480360381019061062491906127f0565b612435565b6040516106369190613987565b60405180910390f35b60006060806000806005600087815260200190815260200160002090508060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16945080600101805461069290613cec565b80601f01602080910402602001604051908101604052809291908181526020018280546106be90613cec565b801561070b5780601f106106e05761010080835404028352916020019161070b565b820191906000526020600020905b8154815290600101906020018083116106ee57829003601f168201915b505050505093508060020180548060200260200160405190810160405280929190818152602001828054801561079657602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001906001019080831161074c575b50505050509250439150509193509193565b8160008082815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610849576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610840906138e7565b60405180910390fd5b8160008085815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550827fde26d3d8fc98a8dab0df21ef2146d313da1a060d635f3ce9b42adab32fa992aa836040516108ca9190613578565b60405180910390a2505050565b60006020528060005260406000206000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600060608060006005600086815260200190815260200160002090508060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16935080600101805461095c90613cec565b80601f016020809104026020016040519081016040528092919081815260200182805461098890613cec565b80156109d55780601f106109aa576101008083540402835291602001916109d5565b820191906000526020600020905b8154815290600101906020018083116109b857829003601f168201915b5050505050925080600201805480602002602001604051908101604052809291908181526020018280548015610a6057602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019060010190808311610a16575b50505050509150509193909250565b6000606088888585600083338484604051602001610a909493929190613473565b60405160208183030381529060405280519060200120905060086000868152602001908152602001600020548114610afd576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610af490613907565b60405180910390fd5b600860008f8152602001908152602001600020600090558d8d7fcde46e28d8d3e348e5f5b4fcc511fe3b1f9b0f549cd8332f0da31802a6f2bf618e8e8e604051610b49939291906139a2565b60405180910390a38873ffffffffffffffffffffffffffffffffffffffff16888f8e8e8e604051602401610b809493929190613887565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050604051610bea919061350f565b6000604051808303816000865af19150503d8060008114610c27576040519150601f19603f3d011682016040523d82523d6000602084013e610c2c565b606091505b508097508198505050505050505097509795505050505050565b83838383600083338484604051602001610c639493929190613473565b60405160208183030381529060405280519060200120905060086000868152602001908152602001600020548114610cd0576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610cc790613907565b60405180910390fd5b600860008a8152602001908152602001600020600090556001600960008b815260200190815260200160002060006101000a81548160ff02191690831515021790555088887f1cfdd5ace64f15111ef8ed9df04364d0e9a9165cccf8386109347e54661ba3ad60405160405180910390a3505050505050505050565b600060046000815480929190610d6190613d1e565b9190505590508160008083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060016003600083815260200190815260200160002081905550807f59e98f4c18a6c92efe8c23bcbd74f0d71e271eebf9a95f9edefdbee17c01f27083604051610e019190613578565b60405180910390a2919050565b60006001600088815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16610ead576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ea490613967565b60405180910390fd5b6000600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490508046338b8787604051602001610f0c969594939291906139d4565b6040516020818303038152906040528051906020012091506000600760008b815260200190815260200160002060000154905080888888604051602001610f569493929190613473565b60405160208183030381529060405280519060200120600860008581526020019081526020016000208190555082817f8339fddbb81e588a9ed04dec82ee9ae6c7a185f44835adaaa2ace50ce3a14aaf8446338f8f8f8f8f8f8f604051610fc69a99989796959493929190613a30565b60405180910390a3600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600081548092919061101e90613d1e565b91905055505050979650505050505050565b60608060608484905067ffffffffffffffff811115611078577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6040519080825280602002602001820160405280156110a65781602001602082028036833780820191505090505b5092508484905067ffffffffffffffff8111156110ec577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b60405190808252806020026020018201604052801561111a5781602001602082028036833780820191505090505b5091508484905067ffffffffffffffff811115611160577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b60405190808252806020026020018201604052801561119357816020015b606081526020019060019003908161117e5790505b50905060005b85859050811015611373576000600760008888858181106111e3577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b90506020020135815260200190815260200160002090508060000154858381518110611238577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6020026020010181815250508060010154848381518110611282577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200260200101818152505080600201805461129d90613cec565b80601f01602080910402602001604051908101604052809291908181526020018280546112c990613cec565b80156113165780601f106112eb57610100808354040283529160200191611316565b820191906000526020600020905b8154815290600101906020018083116112f957829003601f168201915b5050505050838381518110611354577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001018190525050808061136b90613d1e565b915050611199565b509250925092565b60003360405160200161138e9190613578565b60405160208183030381529060405280519060200120905060405180606001604052808773ffffffffffffffffffffffffffffffffffffffff16815260200186868080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050508152602001848480806020026020016040519081016040528093929190818152602001838360200280828437600081840152601f19601f820116905080830192505050505050508152506005600083815260200190815260200160002060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060208201518160010190805190602001906114d292919061244d565b5060408201518160020190805190602001906114ef9291906124d3565b50905050807fcee45ff00381d88710040af9bd1c13ee3176f83efd36b33f2330cca74e53000b878787878760405161152b9594939291906135f3565b60405180910390a295945050505050565b60008060606000600760008681526020019081526020016000209050806000015493508060010154925080600201805461157590613cec565b80601f01602080910402602001604051908101604052809291908181526020018280546115a190613cec565b80156115ee5780601f106115c3576101008083540402835291602001916115ee565b820191906000526020600020905b8154815290600101906020018083116115d157829003601f168201915b50505050509150509193909250565b60096020528060005260406000206000915054906101000a900460ff1681565b8260008082815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146116be576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016116b5906138e7565b60405180910390fd5b6000600260008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054141561174c576001600260008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505b816001600086815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508273ffffffffffffffffffffffffffffffffffffffff16847fd859fb74ec5a83da09d56bb4211667f87fc36cdec8ccdd9ddc7115c99923e75e846040516117fb9190613742565b60405180910390a350505050565b60036020528060005260406000206000915090505481565b60016020528160005260406000206020528060005260406000206000915091509054906101000a900460ff1681565b8260008082815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146118f1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016118e8906138e7565b60405180910390fd5b600060036000868152602001908152602001600020600081548092919061191790613d1e565b91905055468660405160200161192f9392919061353b565b60405160208183030381529060405280519060200120905060008686868660405160200161196094939291906134c1565b6040516020818303038152906040528051906020012090508060066000848152602001908152602001600020819055508186887f3d0ebccb4fc9730699221da0180970852f595ed5c78781346149123cbbe9f1d388886040516119c4929190613593565b60405180910390a450505050505050565b6000838333846040516020016119ee94939291906134c1565b60405160208183030381529060405280519060200120905080600660008781526020019081526020016000205414611a5b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611a5290613927565b60405180910390fd5b60066000868152602001908152602001600020600090558483857f9e7b58b29aa3b972bb0f457499d0dfd00bf23905b0c3358fb864e7120402aefa338634604051611aa8939291906135bc565b60405180910390a460008273ffffffffffffffffffffffffffffffffffffffff1634604051611ad690613526565b60006040518083038185875af1925050503d8060008114611b13576040519150601f19603f3d011682016040523d82523d6000602084013e611b18565b606091505b5050905080611b5c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611b53906138c7565b60405180910390fd5b505050505050565b60008060056000898152602001908152602001600020600201805480602002602001604051908101604052809291908181526020018280548015611bfd57602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019060010190808311611bb3575b5050505050905060008151905060005b81811015611d5c576000838281518110611c50577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200260200101519050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415611c9c576001945050505050611d64565b60008190508073ffffffffffffffffffffffffffffffffffffffff1663066645478c8e8d8d8d8d6040518763ffffffff1660e01b8152600401611ce4969594939291906137a8565b60206040518083038186803b158015611cfc57600080fd5b505afa158015611d10573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d3491906128e7565b15611d4757600195505050505050611d64565b50508080611d5490613d1e565b915050611c0d565b506000925050505b9695505050505050565b6000611d7d868686868661137b565b90506000341115611e365760008673ffffffffffffffffffffffffffffffffffffffff1634604051611dae90613526565b60006040518083038185875af1925050503d8060008114611deb576040519150601f19603f3d011682016040523d82523d6000602084013e611df0565b606091505b5050905080611e34576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611e2b906138c7565b60405180910390fd5b505b95945050505050565b6060888890508b8b9050148015611e5b5750868690508b8b9050145b8015611e6c5750848490508b8b9050145b8015611e7d5750828290508b8b9050145b611ebc576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611eb390613947565b60405180910390fd5b8a8a905067ffffffffffffffff811115611eff577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b604051908082528060200260200182016040528015611f2d5781602001602082028036833780820191505090505b50905060005b8b8b9050811015612101576120a38d8d8d84818110611f7b577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b905060200201358c8c85818110611fbb577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b905060200201358b8b86818110611ffb577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b905060200201358a8a8781811061203b577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b905060200201602081019061205091906127f0565b898988818110612089577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b905060200201602081019061209e91906127f0565b611b64565b8282815181106120dc577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200260200101901515908115158152505080806120f990613d1e565b915050611f33565b509b9a5050505050505050505050565b60008484848460405160200161212a9493929190613809565b604051602081830303815290604052805190602001209050604051806060016040528086815260200185815260200184848080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f8201169050808301925050505050505081525060076000838152602001908152602001600020600082015181600001556020820151816001015560408201518160020190805190602001906121e492919061255d565b50905050807fa3c44778bf2c4729d112c7eeee01a2a79be70e58e3fe0b2a25d6c3562f73ab838686868660405161221e9493929190613809565b60405180910390a2949350505050565b60006001600088815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff166122cd576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016122c490613967565b60405180910390fd5b6000600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490508046338b878760405160200161232c969594939291906139d4565b6040516020818303038152906040528051906020012091508987878760405160200161235b9493929190613473565b604051602081830303815290604052805190602001206008600084815260200190815260200160002081905550818a7fe8ae99161b1547fd1c6ff3cb9660293fa4cd770fd52f72ff0362d64d8bccc08e8346338e8e8e8e8e8e8e6040516123cb9a99989796959493929190613a30565b60405180910390a3600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600081548092919061242390613d1e565b91905055505098975050505050505050565b60026020528060005260406000206000915090505481565b82805461245990613cec565b90600052602060002090601f01602090048101928261247b57600085556124c2565b82601f1061249457805160ff19168380011785556124c2565b828001600101855582156124c2579182015b828111156124c15782518255916020019190600101906124a6565b5b5090506124cf91906125e3565b5090565b82805482825590600052602060002090810192821561254c579160200282015b8281111561254b5782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550916020019190600101906124f3565b5b50905061255991906125e3565b5090565b82805461256990613cec565b90600052602060002090601f01602090048101928261258b57600085556125d2565b82601f106125a457805160ff19168380011785556125d2565b828001600101855582156125d2579182015b828111156125d15782518255916020019190600101906125b6565b5b5090506125df91906125e3565b5090565b5b808211156125fc5760008160009055506001016125e4565b5090565b60008135905061260f81613f1e565b92915050565b60008083601f84011261262757600080fd5b8235905067ffffffffffffffff81111561264057600080fd5b60208301915083602082028301111561265857600080fd5b9250929050565b60008083601f84011261267157600080fd5b8235905067ffffffffffffffff81111561268a57600080fd5b6020830191508360208202830111156126a257600080fd5b9250929050565b60008083601f8401126126bb57600080fd5b8235905067ffffffffffffffff8111156126d457600080fd5b6020830191508360208202830111156126ec57600080fd5b9250929050565b60008135905061270281613f35565b92915050565b60008151905061271781613f35565b92915050565b60008135905061272c81613f4c565b92915050565b60008135905061274181613f63565b92915050565b60008083601f84011261275957600080fd5b8235905067ffffffffffffffff81111561277257600080fd5b60208301915083600182028301111561278a57600080fd5b9250929050565b60008083601f8401126127a357600080fd5b8235905067ffffffffffffffff8111156127bc57600080fd5b6020830191508360018202830111156127d457600080fd5b9250929050565b6000813590506127ea81613f7a565b92915050565b60006020828403121561280257600080fd5b600061281084828501612600565b91505092915050565b60008060008060006060868803121561283157600080fd5b600061283f88828901612600565b955050602086013567ffffffffffffffff81111561285c57600080fd5b61286888828901612791565b9450945050604086013567ffffffffffffffff81111561288757600080fd5b61289388828901612615565b92509250509295509295909350565b600080602083850312156128b557600080fd5b600083013567ffffffffffffffff8111156128cf57600080fd5b6128db8582860161265f565b92509250509250929050565b6000602082840312156128f957600080fd5b600061290784828501612708565b91505092915050565b60006020828403121561292257600080fd5b60006129308482850161271d565b91505092915050565b600080600080600080600080600080600060c08c8e03121561295a57600080fd5b60006129688e828f0161271d565b9b505060208c013567ffffffffffffffff81111561298557600080fd5b6129918e828f0161265f565b9a509a505060408c013567ffffffffffffffff8111156129b057600080fd5b6129bc8e828f0161265f565b985098505060608c013567ffffffffffffffff8111156129db57600080fd5b6129e78e828f016126a9565b965096505060808c013567ffffffffffffffff811115612a0657600080fd5b612a128e828f01612615565b945094505060a08c013567ffffffffffffffff811115612a3157600080fd5b612a3d8e828f01612615565b92509250509295989b509295989b9093969950565b60008060008060808587031215612a6857600080fd5b6000612a768782880161271d565b9450506020612a878782880161271d565b9350506040612a9887828801612600565b9250506060612aa987828801612732565b91505092959194509250565b60008060008060008060c08789031215612ace57600080fd5b6000612adc89828a0161271d565b9650506020612aed89828a0161271d565b9550506040612afe89828a0161271d565b9450506060612b0f89828a016127db565b9350506080612b2089828a01612600565b92505060a0612b3189828a01612600565b9150509295509295509295565b60008060008060608587031215612b5457600080fd5b6000612b628782880161271d565b9450506020612b738782880161271d565b935050604085013567ffffffffffffffff811115612b9057600080fd5b612b9c87828801612747565b925092505092959194509250565b60008060008060808587031215612bc057600080fd5b6000612bce8782880161271d565b9450506020612bdf8782880161271d565b9350506040612bf0878288016127db565b9250506060612c0187828801612600565b91505092959194509250565b60008060008060008060008060e0898b031215612c2957600080fd5b6000612c378b828c0161271d565b9850506020612c488b828c0161271d565b9750506040612c598b828c016127db565b9650506060612c6a8b828c01612600565b9550506080612c7b8b828c01612600565b94505060a0612c8c8b828c01612732565b93505060c089013567ffffffffffffffff811115612ca957600080fd5b612cb58b828c01612747565b92509250509295985092959890939650565b600080600080600080600060c0888a031215612ce257600080fd5b6000612cf08a828b0161271d565b9750506020612d018a828b0161271d565b9650506040612d128a828b016127db565b955050606088013567ffffffffffffffff811115612d2f57600080fd5b612d3b8a828b01612747565b94509450506080612d4e8a828b01612600565b92505060a0612d5f8a828b01612732565b91505092959891949750929550565b60008060008060808587031215612d8457600080fd5b6000612d928782880161271d565b9450506020612da3878288016127db565b9350506040612db487828801612600565b9250506060612dc587828801612600565b91505092959194509250565b600080600080600080600060c0888a031215612dec57600080fd5b6000612dfa8a828b0161271d565b9750506020612e0b8a828b016127db565b9650506040612e1c8a828b01612600565b9550506060612e2d8a828b01612600565b9450506080612e3e8a828b01612732565b93505060a088013567ffffffffffffffff811115612e5b57600080fd5b612e678a828b01612747565b925092505092959891949750929550565b600060208284031215612e8a57600080fd5b6000612e98848285016127db565b91505092915050565b60008060408385031215612eb457600080fd5b6000612ec2858286016127db565b9250506020612ed385828601612600565b9150509250929050565b600080600060608486031215612ef257600080fd5b6000612f00868287016127db565b9350506020612f1186828701612600565b9250506040612f22868287016126f3565b9150509250925092565b6000612f388383612f88565b60208301905092915050565b6000612f5083836131a9565b60208301905092915050565b6000612f6883836131c7565b60208301905092915050565b6000612f80838361324f565b905092915050565b612f9181613c2c565b82525050565b612fa081613c2c565b82525050565b612fb7612fb282613c2c565b613d67565b82525050565b6000612fc98385613b93565b9350612fd482613ac6565b8060005b8581101561300d57612fea8284613c15565b612ff48882612f2c565b9750612fff83613b52565b925050600181019050612fd8565b5085925050509392505050565b600061302582613b10565b61302f8185613b93565b935061303a83613ad0565b8060005b8381101561306b5781516130528882612f2c565b975061305d83613b5f565b92505060018101905061303e565b5085935050505092915050565b600061308382613b1b565b61308d8185613ba4565b935061309883613ae0565b8060005b838110156130c95781516130b08882612f44565b97506130bb83613b6c565b92505060018101905061309c565b5085935050505092915050565b60006130e182613b26565b6130eb8185613bb5565b93506130f683613af0565b8060005b8381101561312757815161310e8882612f5c565b975061311983613b79565b9250506001810190506130fa565b5085935050505092915050565b600061313f82613b31565b6131498185613bc6565b93508360208202850161315b85613b00565b8060005b8581101561319757848403895281516131788582612f74565b945061318383613b86565b925060208a0199505060018101905061315f565b50829750879550505050505092915050565b6131b281613c3e565b82525050565b6131c181613c3e565b82525050565b6131d081613c4a565b82525050565b6131df81613c4a565b82525050565b6131f66131f182613c4a565b613d79565b82525050565b61320581613c54565b82525050565b61321c61321782613c54565b613d83565b82525050565b600061322e8385613be8565b935061323b838584613caa565b61324483613e07565b840190509392505050565b600061325a82613b3c565b6132648185613bd7565b9350613274818560208601613cb9565b61327d81613e07565b840191505092915050565b600061329382613b3c565b61329d8185613be8565b93506132ad818560208601613cb9565b6132b681613e07565b840191505092915050565b60006132cc82613b3c565b6132d68185613bf9565b93506132e6818560208601613cb9565b80840191505092915050565b60006132fe8385613c04565b935061330b838584613caa565b61331483613e07565b840190509392505050565b600061332a82613b47565b6133348185613c04565b9350613344818560208601613cb9565b61334d81613e07565b840191505092915050565b6000613365600f83613c04565b915061337082613e25565b602082019050919050565b6000613388601a83613c04565b915061339382613e4e565b602082019050919050565b60006133ab600f83613c04565b91506133b682613e77565b602082019050919050565b60006133ce601a83613c04565b91506133d982613ea0565b602082019050919050565b60006133f1601983613c04565b91506133fc82613ec9565b602082019050919050565b6000613414600083613bf9565b915061341f82613ef2565b600082019050919050565b6000613437602083613c04565b915061344282613ef5565b602082019050919050565b61345681613ca0565b82525050565b61346d61346882613ca0565b613d9f565b82525050565b600061347f82876131e5565b60208201915061348f8286612fa6565b60148201915061349f8285612fa6565b6014820191506134af828461320b565b60048201915081905095945050505050565b60006134cd82876131e5565b6020820191506134dd828661345c565b6020820191506134ed8285612fa6565b6014820191506134fd8284612fa6565b60148201915081905095945050505050565b600061351b82846132c1565b915081905092915050565b600061353182613407565b9150819050919050565b6000613547828661345c565b602082019150613557828561345c565b602082019150613567828461345c565b602082019150819050949350505050565b600060208201905061358d6000830184612f97565b92915050565b60006040820190506135a86000830185612f97565b6135b56020830184612f97565b9392505050565b60006060820190506135d16000830186612f97565b6135de6020830185612f97565b6135eb604083018461344d565b949350505050565b60006060820190506136086000830188612f97565b818103602083015261361b8186886132f2565b90508181036040830152613630818486612fbd565b90509695505050505050565b60006060820190506136516000830186612f97565b8181036020830152613663818561331f565b90508181036040830152613677818461301a565b9050949350505050565b60006080820190506136966000830187612f97565b81810360208301526136a8818661331f565b905081810360408301526136bc818561301a565b90506136cb606083018461344d565b95945050505050565b600060208201905081810360008301526136ee8184613078565b905092915050565b6000606082019050818103600083015261371081866130d6565b9050818103602083015261372481856130d6565b905081810360408301526137388184613134565b9050949350505050565b600060208201905061375760008301846131b8565b92915050565b600060408201905061377260008301856131b8565b81810360208301526137848184613288565b90509392505050565b60006020820190506137a260008301846131d6565b92915050565b600060c0820190506137bd60008301896131d6565b6137ca60208301886131d6565b6137d760408301876131d6565b6137e4606083018661344d565b6137f16080830185612f97565b6137fe60a0830184612f97565b979650505050505050565b600060608201905061381e60008301876131d6565b61382b60208301866131d6565b818103604083015261383e818486613222565b905095945050505050565b600060608201905061385e60008301866131d6565b61386b60208301856131d6565b818103604083015261387d8184613288565b9050949350505050565b600060608201905061389c60008301876131d6565b6138a9602083018661344d565b81810360408301526138bc818486613222565b905095945050505050565b600060208201905081810360008301526138e081613358565b9050919050565b600060208201905081810360008301526139008161337b565b9050919050565b600060208201905081810360008301526139208161339e565b9050919050565b60006020820190508181036000830152613940816133c1565b9050919050565b60006020820190508181036000830152613960816133e4565b9050919050565b600060208201905081810360008301526139808161342a565b9050919050565b600060208201905061399c600083018461344d565b92915050565b60006040820190506139b7600083018661344d565b81810360208301526139ca818486613222565b9050949350505050565b600060a0820190506139e9600083018961344d565b6139f6602083018861344d565b613a036040830187612f97565b613a1060608301866131d6565b8181036080830152613a23818486613222565b9050979650505050505050565b600061012082019050613a46600083018d61344d565b613a53602083018c61344d565b613a60604083018b612f97565b613a6d606083018a6131d6565b613a7a608083018961344d565b613a8760a0830188612f97565b613a9460c0830187612f97565b613aa160e08301866131fc565b818103610100830152613ab5818486613222565b90509b9a5050505050505050505050565b6000819050919050565b6000819050602082019050919050565b6000819050602082019050919050565b6000819050602082019050919050565b6000819050602082019050919050565b600081519050919050565b600081519050919050565b600081519050919050565b600081519050919050565b600081519050919050565b600081519050919050565b6000602082019050919050565b6000602082019050919050565b6000602082019050919050565b6000602082019050919050565b6000602082019050919050565b600082825260208201905092915050565b600082825260208201905092915050565b600082825260208201905092915050565b600082825260208201905092915050565b600082825260208201905092915050565b600082825260208201905092915050565b600081905092915050565b600082825260208201905092915050565b6000613c246020840184612600565b905092915050565b6000613c3782613c80565b9050919050565b60008115159050919050565b6000819050919050565b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b82818337600083830152505050565b60005b83811015613cd7578082015181840152602081019050613cbc565b83811115613ce6576000848401525b50505050565b60006002820490506001821680613d0457607f821691505b60208210811415613d1857613d17613dd8565b5b50919050565b6000613d2982613ca0565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415613d5c57613d5b613da9565b5b600182019050919050565b6000613d7282613d8d565b9050919050565b6000819050919050565b6000819050919050565b6000613d9882613e18565b9050919050565b6000819050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6000601f19601f8301169050919050565b60008160601b9050919050565b7f5472616e73666572206661696c65640000000000000000000000000000000000600082015250565b7f43616c6c6572206e6f74207265717565737465722061646d696e000000000000600082015250565b7f4e6f207375636820726571756573740000000000000000000000000000000000600082015250565b7f4e6f2073756368207769746864726177616c2072657175657374000000000000600082015250565b7f556e657175616c20706172616d65746572206c656e6774687300000000000000600082015250565b50565b7f436c69656e74206e6f7420656e646f7273656420627920726571756573746572600082015250565b613f2781613c2c565b8114613f3257600080fd5b50565b613f3e81613c3e565b8114613f4957600080fd5b50565b613f5581613c4a565b8114613f6057600080fd5b50565b613f6c81613c54565b8114613f7757600080fd5b50565b613f8381613ca0565b8114613f8e57600080fd5b5056fea26469706673582212206572401b0561ed435aa847415982737eab1e8ae701bf1f405f1f114a37d593b864736f6c63430008040033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "checkAuthorizationStatus(bytes32,bytes32,bytes32,uint256,address,address)": {
        "details": "This method is meant to be called off-chain by the Airnode to decide if it should respond to a request. The requester can also call it, yet this function returning true should not be taken as a guarantee of the subsequent call request being fulfilled (as the Airnode may update its authorizers in the meantime). The Airnode authorizers being empty means all requests will be denied, while any `address(0)` authorizer means all requests will be accepted.",
        "params": {
          "airnodeId": "Airnode ID from AirnodeParameterStore",
          "clientAddress": "Client address",
          "designatedWallet": "Designated wallet",
          "endpointId": "Endpoint ID from EndpointStore",
          "requestId": "Request ID",
          "requesterIndex": "Requester index from RequesterStore"
        },
        "returns": {
          "status": "Authorization status of the request"
        }
      },
      "checkAuthorizationStatuses(bytes32,bytes32[],bytes32[],uint256[],address[],address[])": {
        "details": "If this reverts, Airnode will use checkAuthorizationStatus() to do the checks individually",
        "params": {
          "airnodeId": "Airnode ID from AirnodeParameterStore",
          "clientAddresses": "Client addresses",
          "designatedWallets": "Designated wallets",
          "endpointIds": "Endpoint IDs from EndpointStore",
          "requestIds": "Request IDs",
          "requesterIndices": "Requester indices from RequesterStore"
        },
        "returns": {
          "statuses": "Authorization statuses of the request"
        }
      },
      "createRequester(address)": {
        "params": {
          "admin": "Requester admin"
        },
        "returns": {
          "requesterIndex": "Requester index"
        }
      },
      "createTemplate(bytes32,bytes32,bytes)": {
        "details": "A specific set of request parameters will always have the same ID. This means a few things: (1) You can compute the expected ID of a set of parameters off-chain, (2) creating a new template with the same parameters will overwrite the old one and return the same template ID, (3) after you query a template with its ID, you can verify its integrity by applying the hash and comparing the result with the ID.",
        "params": {
          "airnodeId": "Airnode ID from AirnodeParameterStore",
          "endpointId": "Endpoint ID from EndpointStore",
          "parameters": "Static request parameters (i.e., parameters that will not change between requests, unlike the dynamic parameters determined at request-time)"
        },
        "returns": {
          "templateId": "Request template ID"
        }
      },
      "fail(bytes32,bytes32,address,bytes4)": {
        "details": "Airnode should fall back to this if a request cannot be fulfilled because fulfill() reverts",
        "params": {
          "airnodeId": "Airnode ID from AirnodeParameterStore",
          "fulfillAddress": "Address that will be called to fulfill",
          "fulfillFunctionId": "Signature of the function that will be called to fulfill",
          "requestId": "Request ID"
        }
      },
      "fulfill(bytes32,bytes32,uint256,bytes,address,bytes4)": {
        "details": "`statusCode` being zero indicates a successful fulfillment, while non-zero values indicate error (the meanings of these values are implementation-dependent). The data is ABI-encoded as a `bytes` type, with its format depending on the request specifications.",
        "params": {
          "airnodeId": "Airnode ID from AirnodeParameterStore",
          "data": "Fulfillment data",
          "fulfillAddress": "Address that will be called to fulfill",
          "fulfillFunctionId": "Signature of the function that will be called to fulfill",
          "requestId": "Request ID",
          "statusCode": "Status code of the fulfillment"
        },
        "returns": {
          "callData": "Data returned by the fulfillment call (if there is any)",
          "callSuccess": "If the fulfillment call succeeded"
        }
      },
      "fulfillWithdrawal(bytes32,bytes32,uint256,address)": {
        "details": "The Airnode sends the funds through this method to emit an event that indicates that the withdrawal request has been fulfilled",
        "params": {
          "airnodeId": "Airnode ID",
          "destination": "Withdrawal destination",
          "requesterIndex": "Requester index from RequesterStore"
        }
      },
      "getAirnodeParameters(bytes32)": {
        "params": {
          "airnodeId": "Airnode ID"
        },
        "returns": {
          "admin": "Airnode admin",
          "authorizers": "Authorizer contract addresses of the Airnode",
          "xpub": "Master public key of the Airnode"
        }
      },
      "getAirnodeParametersAndBlockNumber(bytes32)": {
        "params": {
          "airnodeId": "Airnode ID from AirnodeParameterStore"
        },
        "returns": {
          "admin": "Airnode admin",
          "authorizers": "Authorizer contract addresses of the Airnode",
          "blockNumber": "Block number",
          "xpub": "Master public key of the Airnode"
        }
      },
      "getTemplate(bytes32)": {
        "params": {
          "templateId": "Request template ID"
        },
        "returns": {
          "airnodeId": "Airnode ID from AirnodeParameterStore",
          "endpointId": "Endpoint ID from EndpointStore",
          "parameters": "Static request parameters (i.e., parameters that will not change between requests, unlike the dynamic parameters determined at request-time)"
        }
      },
      "getTemplates(bytes32[])": {
        "details": "If this reverts, Airnode will use getTemplate() to get the templates individually",
        "params": {
          "templateIds": "Request template IDs from TemplateStore"
        },
        "returns": {
          "airnodeIds": "Array of Airnode IDs from AirnodeParameterStore",
          "endpointIds": "Array of endpoint IDs from EndpointStore",
          "parameters": "Array of request parameters"
        }
      },
      "makeFullRequest(bytes32,bytes32,uint256,address,address,bytes4,bytes)": {
        "params": {
          "airnodeId": "Airnode ID from AirnodeParameterStore",
          "designatedWallet": "Designated wallet that is requested to fulfill the request",
          "endpointId": "Endpoint ID from EndpointStore",
          "fulfillAddress": "Address that will be called to fulfill",
          "fulfillFunctionId": "Signature of the function that will be called to fulfill",
          "parameters": "All request parameters",
          "requesterIndex": "Requester index from RequesterStore"
        },
        "returns": {
          "requestId": "Request ID"
        }
      },
      "makeRequest(bytes32,uint256,address,address,bytes4,bytes)": {
        "params": {
          "designatedWallet": "Designated wallet that is requested to fulfill the request",
          "fulfillAddress": "Address that will be called to fulfill",
          "fulfillFunctionId": "Signature of the function that will be called to fulfill",
          "parameters": "Parameters provided by the client in addition to the parameters in the template.",
          "requesterIndex": "Requester index from RequesterStore",
          "templateId": "Template ID from TemplateStore"
        },
        "returns": {
          "requestId": "Request ID"
        }
      },
      "requestWithdrawal(bytes32,uint256,address,address)": {
        "details": "We do not need to use the withdrawal request parameters in the request ID hash to validate them at the node side because all of the parameters are used during fulfillment and will get validated on-chain",
        "params": {
          "airnodeId": "Airnode ID",
          "designatedWallet": "Designated wallet that the withdrawal is requested from",
          "destination": "Withdrawal destination",
          "requesterIndex": "Requester index from RequesterStore"
        }
      },
      "setAirnodeParameters(address,string,address[])": {
        "details": "This method can also be used to update `admin`, `xpub` and/or `authorizers`. `admin` is not used in the protocol contracts. It is intended to potentially be referred to in authorizer contracts. Note that the Airnode can announce an incorrect `xpub`. However, the mismatch between it and the airnodeId can be detected off-chain. This needs to be payable to be callable by setAirnodeParametersAndForwardFunds().",
        "params": {
          "admin": "Airnode admin",
          "authorizers": "Authorizer contract addresses of the Airnode",
          "xpub": "Master public key of the Airnode"
        },
        "returns": {
          "airnodeId": "Airnode ID"
        }
      },
      "setAirnodeParametersAndForwardFunds(address,string,address[])": {
        "params": {
          "admin": "Airnode admin",
          "authorizers": "Authorizer contract addresses of the Airnode",
          "xpub": "Master public key of the Airnode"
        },
        "returns": {
          "airnodeId": "Airnode ID from AirnodeParameterStore"
        }
      },
      "setClientEndorsementStatus(uint256,address,bool)": {
        "details": "This is not Airnode-specific, i.e., the requester allows the client's requests to be fulfilled through its designated wallets across all Airnodes",
        "params": {
          "clientAddress": "Client address",
          "requesterIndex": "Requester index"
        }
      },
      "setRequesterAdmin(uint256,address)": {
        "params": {
          "admin": "Requester admin",
          "requesterIndex": "Requester index"
        }
      }
    },
    "title": "The contract used to make and fulfill requests",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "checkAuthorizationStatus(bytes32,bytes32,bytes32,uint256,address,address)": {
        "notice": "Uses the authorizer contracts of an Airnode to decide if a request is authorized. Once an Airnode receives a request, it calls this method to determine if it should respond. Similarly, third parties can use this method to determine if a particular request would be authorized."
      },
      "checkAuthorizationStatuses(bytes32,bytes32[],bytes32[],uint256[],address[],address[])": {
        "notice": "A convenience function to make multiple authorization status checks with a single call"
      },
      "createRequester(address)": {
        "notice": "Creates a requester with the given parameters, addressable by the index it returns"
      },
      "createTemplate(bytes32,bytes32,bytes)": {
        "notice": "Creates a request template with the given parameters, addressable by the ID it returns"
      },
      "fail(bytes32,bytes32,address,bytes4)": {
        "notice": "Called by Airnode if the request cannot be fulfilled"
      },
      "fulfill(bytes32,bytes32,uint256,bytes,address,bytes4)": {
        "notice": "Called by Airnode to fulfill the request (regular or full)"
      },
      "fulfillWithdrawal(bytes32,bytes32,uint256,address)": {
        "notice": "Called by the Airnode using the designated wallet to fulfill the withdrawal request made by the requester"
      },
      "getAirnodeParameters(bytes32)": {
        "notice": "Retrieves the parameters of the Airnode addressed by the ID"
      },
      "getAirnodeParametersAndBlockNumber(bytes32)": {
        "notice": "A convenience method to retrieve the Airnode parameters and the block number with a single call"
      },
      "getTemplate(bytes32)": {
        "notice": "Retrieves the parameters of the request template addressed by the ID"
      },
      "getTemplates(bytes32[])": {
        "notice": "A convenience method to retrieve multiple templates with a single call"
      },
      "makeFullRequest(bytes32,bytes32,uint256,address,address,bytes4,bytes)": {
        "notice": "Called by the client to make a full request. A full request provides all of its parameters as arguments and does not refer to a template."
      },
      "makeRequest(bytes32,uint256,address,address,bytes4,bytes)": {
        "notice": "Called by the client to make a regular request. A regular request refers to a template for the Airnode, endpoint and parameters."
      },
      "requestWithdrawal(bytes32,uint256,address,address)": {
        "notice": "Called by the requester admin to create a request for the Airnode to send the funds kept in their designated wallet to the destination"
      },
      "setAirnodeParameters(address,string,address[])": {
        "notice": "Allows the master wallet (m) of the Airnode to set its parameters on this chain"
      },
      "setAirnodeParametersAndForwardFunds(address,string,address[])": {
        "notice": "A convenience method for the Airnode to set its parameters and forward the remaining funds in the master wallet to the Airnode admin"
      },
      "setClientEndorsementStatus(uint256,address,bool)": {
        "notice": "Called by the requester admin to endorse a client, i.e., allow a client to use its designated wallets, or disendorse them"
      },
      "setRequesterAdmin(uint256,address)": {
        "notice": "Sets the requester admin"
      }
    },
    "notice": "Clients use this contract to make requests and Airnodes use it to fulfill them. In addition, it inherits from the contracts that keep records or Airnodes, requesters and templates. It also includes some convenience methods that Airnodes use to reduce the number of calls they make to blockchain providers.",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 979,
        "contract": "contracts/AirnodeRrp.sol:AirnodeRrp",
        "label": "requesterIndexToAdmin",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 985,
        "contract": "contracts/AirnodeRrp.sol:AirnodeRrp",
        "label": "requesterIndexToClientAddressToEndorsementStatus",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_uint256,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 989,
        "contract": "contracts/AirnodeRrp.sol:AirnodeRrp",
        "label": "clientAddressToNoRequests",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 993,
        "contract": "contracts/AirnodeRrp.sol:AirnodeRrp",
        "label": "requesterIndexToNextWithdrawalRequestIndex",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 996,
        "contract": "contracts/AirnodeRrp.sol:AirnodeRrp",
        "label": "noRequesters",
        "offset": 0,
        "slot": "4",
        "type": "t_uint256"
      },
      {
        "astId": 22,
        "contract": "contracts/AirnodeRrp.sol:AirnodeRrp",
        "label": "airnodeParameters",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_bytes32,t_struct(AirnodeParameter)17_storage)"
      },
      {
        "astId": 26,
        "contract": "contracts/AirnodeRrp.sol:AirnodeRrp",
        "label": "withdrawalRequestIdToParameters",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_bytes32,t_bytes32)"
      },
      {
        "astId": 1130,
        "contract": "contracts/AirnodeRrp.sol:AirnodeRrp",
        "label": "templates",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_bytes32,t_struct(Template)1125_storage)"
      },
      {
        "astId": 329,
        "contract": "contracts/AirnodeRrp.sol:AirnodeRrp",
        "label": "requestIdToFulfillmentParameters",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_bytes32,t_bytes32)"
      },
      {
        "astId": 333,
        "contract": "contracts/AirnodeRrp.sol:AirnodeRrp",
        "label": "requestWithIdHasFailed",
        "offset": 0,
        "slot": "9",
        "type": "t_mapping(t_bytes32,t_bool)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_bytes_storage": {
        "encoding": "bytes",
        "label": "bytes",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_bytes32,t_bool)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_bytes32,t_bytes32)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => bytes32)",
        "numberOfBytes": "32",
        "value": "t_bytes32"
      },
      "t_mapping(t_bytes32,t_struct(AirnodeParameter)17_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct AirnodeParameterStore.AirnodeParameter)",
        "numberOfBytes": "32",
        "value": "t_struct(AirnodeParameter)17_storage"
      },
      "t_mapping(t_bytes32,t_struct(Template)1125_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct TemplateStore.Template)",
        "numberOfBytes": "32",
        "value": "t_struct(Template)1125_storage"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint256,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(AirnodeParameter)17_storage": {
        "encoding": "inplace",
        "label": "struct AirnodeParameterStore.AirnodeParameter",
        "members": [
          {
            "astId": 11,
            "contract": "contracts/AirnodeRrp.sol:AirnodeRrp",
            "label": "admin",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 13,
            "contract": "contracts/AirnodeRrp.sol:AirnodeRrp",
            "label": "xpub",
            "offset": 0,
            "slot": "1",
            "type": "t_string_storage"
          },
          {
            "astId": 16,
            "contract": "contracts/AirnodeRrp.sol:AirnodeRrp",
            "label": "authorizers",
            "offset": 0,
            "slot": "2",
            "type": "t_array(t_address)dyn_storage"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_struct(Template)1125_storage": {
        "encoding": "inplace",
        "label": "struct TemplateStore.Template",
        "members": [
          {
            "astId": 1120,
            "contract": "contracts/AirnodeRrp.sol:AirnodeRrp",
            "label": "airnodeId",
            "offset": 0,
            "slot": "0",
            "type": "t_bytes32"
          },
          {
            "astId": 1122,
            "contract": "contracts/AirnodeRrp.sol:AirnodeRrp",
            "label": "endpointId",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          },
          {
            "astId": 1124,
            "contract": "contracts/AirnodeRrp.sol:AirnodeRrp",
            "label": "parameters",
            "offset": 0,
            "slot": "2",
            "type": "t_bytes_storage"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}
