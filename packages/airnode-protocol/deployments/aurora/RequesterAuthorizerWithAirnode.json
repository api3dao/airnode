{
  "address": "0x1d4F592E0723e03bed2Ff6d78F3CEe6750f08B38",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_accessControlRegistry",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "_adminRoleDescription",
          "type": "string"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "airnode",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "endpointId",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "requester",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "expiration",
          "type": "uint256"
        }
      ],
      "name": "ExtendedWhitelistExpiration",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "airnode",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "endpointId",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "requester",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "setter",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint192",
          "name": "indefiniteWhitelistCount",
          "type": "uint192"
        }
      ],
      "name": "RevokedIndefiniteWhitelistStatus",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "airnode",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "endpointId",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "requester",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "status",
          "type": "bool"
        },
        {
          "indexed": false,
          "internalType": "uint192",
          "name": "indefiniteWhitelistCount",
          "type": "uint192"
        }
      ],
      "name": "SetIndefiniteWhitelistStatus",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "airnode",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "endpointId",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "requester",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "expiration",
          "type": "uint256"
        }
      ],
      "name": "SetWhitelistExpiration",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "INDEFINITE_WHITELISTER_ROLE_DESCRIPTION",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "WHITELIST_EXPIRATION_EXTENDER_ROLE_DESCRIPTION",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "WHITELIST_EXPIRATION_SETTER_ROLE_DESCRIPTION",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "accessControlRegistry",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "adminRoleDescription",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "airnode",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "endpointId",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "requester",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "setter",
          "type": "address"
        }
      ],
      "name": "airnodeToEndpointIdToRequesterToSetterToIndefiniteWhitelistStatus",
      "outputs": [
        {
          "internalType": "bool",
          "name": "indefiniteWhitelistStatus",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "airnode",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "endpointId",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "requester",
          "type": "address"
        }
      ],
      "name": "airnodeToEndpointIdToRequesterToWhitelistStatus",
      "outputs": [
        {
          "internalType": "uint64",
          "name": "expirationTimestamp",
          "type": "uint64"
        },
        {
          "internalType": "uint192",
          "name": "indefiniteWhitelistCount",
          "type": "uint192"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "airnode",
          "type": "address"
        }
      ],
      "name": "deriveAdminRole",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "adminRole",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "airnode",
          "type": "address"
        }
      ],
      "name": "deriveIndefiniteWhitelisterRole",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "indefiniteWhitelisterRole",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "airnode",
          "type": "address"
        }
      ],
      "name": "deriveWhitelistExpirationExtenderRole",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "whitelistExpirationExtenderRole",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "airnode",
          "type": "address"
        }
      ],
      "name": "deriveWhitelistExpirationSetterRole",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "whitelistExpirationSetterRole",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "airnode",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "endpointId",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "requester",
          "type": "address"
        },
        {
          "internalType": "uint64",
          "name": "expirationTimestamp",
          "type": "uint64"
        }
      ],
      "name": "extendWhitelistExpiration",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "airnode",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "endpointId",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "requester",
          "type": "address"
        }
      ],
      "name": "isAuthorized",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "requestId",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "airnode",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "endpointId",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "sponsor",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "requester",
          "type": "address"
        }
      ],
      "name": "isAuthorizedV0",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes[]",
          "name": "data",
          "type": "bytes[]"
        }
      ],
      "name": "multicall",
      "outputs": [
        {
          "internalType": "bytes[]",
          "name": "results",
          "type": "bytes[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "airnode",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "endpointId",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "requester",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "setter",
          "type": "address"
        }
      ],
      "name": "revokeIndefiniteWhitelistStatus",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "airnode",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "endpointId",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "requester",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "status",
          "type": "bool"
        }
      ],
      "name": "setIndefiniteWhitelistStatus",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "airnode",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "endpointId",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "requester",
          "type": "address"
        },
        {
          "internalType": "uint64",
          "name": "expirationTimestamp",
          "type": "uint64"
        }
      ],
      "name": "setWhitelistExpiration",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xd5f5e61a93f81b617ab9472c3d022a8d23d0042691a3f03932ecc84a426ba686",
  "receipt": {
    "to": null,
    "from": "0xBba33C9cB97a3eB9be85C5B9A8Da43D266d01c33",
    "contractAddress": "0x1d4F592E0723e03bed2Ff6d78F3CEe6750f08B38",
    "transactionIndex": 1,
    "gasUsed": "1567323",
    "logsBloom": "0x
    "blockHash": "0x03a6ba3939cab84eaade8266ed566d08a00239fd7e090d02c32200ff31064c95",
    "transactionHash": "0xd5f5e61a93f81b617ab9472c3d022a8d23d0042691a3f03932ecc84a426ba686",
    "logs": [],
    "blockNumber": 79439098,
    "cumulativeGasUsed": "0",
    "status": 1,
    "byzantium": true
  },
  "args": ["0xb3070A0F2f84765Ee19EfADf91dfE50690a9eEa1", "RequesterAuthorizerWithAirnode admin"],
  "numDeployments": 2,
  "solcInputHash": "0ab40609a497e05bef785ddb4724b7a0",
  "metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_accessControlRegistry\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_adminRoleDescription\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"airnode\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"endpointId\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"requester\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"expiration\",\"type\":\"uint256\"}],\"name\":\"ExtendedWhitelistExpiration\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"airnode\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"endpointId\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"requester\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"setter\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint192\",\"name\":\"indefiniteWhitelistCount\",\"type\":\"uint192\"}],\"name\":\"RevokedIndefiniteWhitelistStatus\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"airnode\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"endpointId\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"requester\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"uint192\",\"name\":\"indefiniteWhitelistCount\",\"type\":\"uint192\"}],\"name\":\"SetIndefiniteWhitelistStatus\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"airnode\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"endpointId\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"requester\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"expiration\",\"type\":\"uint256\"}],\"name\":\"SetWhitelistExpiration\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"INDEFINITE_WHITELISTER_ROLE_DESCRIPTION\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"WHITELIST_EXPIRATION_EXTENDER_ROLE_DESCRIPTION\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"WHITELIST_EXPIRATION_SETTER_ROLE_DESCRIPTION\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"accessControlRegistry\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"adminRoleDescription\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"airnode\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"endpointId\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"requester\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"setter\",\"type\":\"address\"}],\"name\":\"airnodeToEndpointIdToRequesterToSetterToIndefiniteWhitelistStatus\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"indefiniteWhitelistStatus\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"airnode\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"endpointId\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"requester\",\"type\":\"address\"}],\"name\":\"airnodeToEndpointIdToRequesterToWhitelistStatus\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"expirationTimestamp\",\"type\":\"uint64\"},{\"internalType\":\"uint192\",\"name\":\"indefiniteWhitelistCount\",\"type\":\"uint192\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"airnode\",\"type\":\"address\"}],\"name\":\"deriveAdminRole\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"adminRole\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"airnode\",\"type\":\"address\"}],\"name\":\"deriveIndefiniteWhitelisterRole\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"indefiniteWhitelisterRole\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"airnode\",\"type\":\"address\"}],\"name\":\"deriveWhitelistExpirationExtenderRole\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"whitelistExpirationExtenderRole\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"airnode\",\"type\":\"address\"}],\"name\":\"deriveWhitelistExpirationSetterRole\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"whitelistExpirationSetterRole\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"airnode\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"endpointId\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"requester\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"expirationTimestamp\",\"type\":\"uint64\"}],\"name\":\"extendWhitelistExpiration\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"airnode\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"endpointId\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"requester\",\"type\":\"address\"}],\"name\":\"isAuthorized\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"requestId\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"airnode\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"endpointId\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"sponsor\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"requester\",\"type\":\"address\"}],\"name\":\"isAuthorizedV0\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes[]\",\"name\":\"data\",\"type\":\"bytes[]\"}],\"name\":\"multicall\",\"outputs\":[{\"internalType\":\"bytes[]\",\"name\":\"results\",\"type\":\"bytes[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"airnode\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"endpointId\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"requester\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"setter\",\"type\":\"address\"}],\"name\":\"revokeIndefiniteWhitelistStatus\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"airnode\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"endpointId\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"requester\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"}],\"name\":\"setIndefiniteWhitelistStatus\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"airnode\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"endpointId\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"requester\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"expirationTimestamp\",\"type\":\"uint64\"}],\"name\":\"setWhitelistExpiration\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"airnodeToEndpointIdToRequesterToSetterToIndefiniteWhitelistStatus(address,bytes32,address,address)\":{\"params\":{\"airnode\":\"Airnode address\",\"endpointId\":\"Endpoint ID\",\"requester\":\"Requester address\",\"setter\":\"Address of the account that has potentially whitelisted `requester` for the `airnode`\\u2013`endpointId` pair indefinitely\"},\"returns\":{\"indefiniteWhitelistStatus\":\"If `setter` has indefinitely whitelisted `requester` for the `airnode`\\u2013`endpointId` pair\"}},\"airnodeToEndpointIdToRequesterToWhitelistStatus(address,bytes32,address)\":{\"params\":{\"airnode\":\"Airnode address\",\"endpointId\":\"Endpoint ID\",\"requester\":\"Requester address\"},\"returns\":{\"expirationTimestamp\":\"Timestamp at which the temporary whitelist will expire\",\"indefiniteWhitelistCount\":\"Number of times `requester` was whitelisted indefinitely for the `airnode`\\u2013`endpointId` pair\"}},\"constructor\":{\"params\":{\"_accessControlRegistry\":\"AccessControlRegistry contract address\",\"_adminRoleDescription\":\"Admin role description\"}},\"deriveAdminRole(address)\":{\"params\":{\"airnode\":\"Airnode address\"},\"returns\":{\"adminRole\":\"Admin role\"}},\"deriveIndefiniteWhitelisterRole(address)\":{\"params\":{\"airnode\":\"Airnode address\"},\"returns\":{\"indefiniteWhitelisterRole\":\"Indefinite whitelister role\"}},\"deriveWhitelistExpirationExtenderRole(address)\":{\"params\":{\"airnode\":\"Airnode address\"},\"returns\":{\"whitelistExpirationExtenderRole\":\"Whitelist expiration extender role\"}},\"deriveWhitelistExpirationSetterRole(address)\":{\"params\":{\"airnode\":\"Airnode address\"},\"returns\":{\"whitelistExpirationSetterRole\":\"Whitelist expiration setter role\"}},\"extendWhitelistExpiration(address,bytes32,address,uint64)\":{\"params\":{\"airnode\":\"Airnode address\",\"endpointId\":\"Endpoint ID\",\"expirationTimestamp\":\"Timestamp at which the temporary whitelist will expire\",\"requester\":\"Requester address\"}},\"isAuthorized(address,bytes32,address)\":{\"params\":{\"airnode\":\"Airnode address\",\"endpointId\":\"Endpoint ID\",\"requester\":\"Requester address\"},\"returns\":{\"_0\":\"Authorization status of the request\"}},\"isAuthorizedV0(bytes32,address,bytes32,address,address)\":{\"details\":\"This method has redundant arguments because V0 authorizer contracts have to have the same interface and potential authorizer contracts may require to access the arguments that are redundant here\",\"params\":{\"airnode\":\"Airnode address\",\"endpointId\":\"Endpoint ID\",\"requestId\":\"Request ID\",\"requester\":\"Requester address\",\"sponsor\":\"Sponsor address\"},\"returns\":{\"_0\":\"Authorization status of the request\"}},\"multicall(bytes[])\":{\"details\":\"Receives and executes a batch of function calls on this contract.\"},\"revokeIndefiniteWhitelistStatus(address,bytes32,address,address)\":{\"params\":{\"airnode\":\"Airnode address\",\"endpointId\":\"Endpoint ID\",\"requester\":\"Requester address\",\"setter\":\"Setter of the indefinite whitelist status\"}},\"setIndefiniteWhitelistStatus(address,bytes32,address,bool)\":{\"params\":{\"airnode\":\"Airnode address\",\"endpointId\":\"Endpoint ID\",\"requester\":\"Requester address\",\"status\":\"Indefinite whitelist status\"}},\"setWhitelistExpiration(address,bytes32,address,uint64)\":{\"details\":\"Unlike `extendWhitelistExpiration()`, this can hasten expiration\",\"params\":{\"airnode\":\"Airnode address\",\"endpointId\":\"Endpoint ID\",\"expirationTimestamp\":\"Timestamp at which the temporary whitelist will expire\",\"requester\":\"Requester address\"}}},\"title\":\"Authorizer contract that Airnode operators can use to temporarily or indefinitely whitelist requesters for Airnode\\u2013endpoint pairs\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"INDEFINITE_WHITELISTER_ROLE_DESCRIPTION()\":{\"notice\":\"Indefinite whitelister role description\"},\"WHITELIST_EXPIRATION_EXTENDER_ROLE_DESCRIPTION()\":{\"notice\":\"Whitelist expiration extender role description\"},\"WHITELIST_EXPIRATION_SETTER_ROLE_DESCRIPTION()\":{\"notice\":\"Whitelist expiration setter role description\"},\"accessControlRegistry()\":{\"notice\":\"AccessControlRegistry contract address\"},\"adminRoleDescription()\":{\"notice\":\"Admin role description\"},\"airnodeToEndpointIdToRequesterToSetterToIndefiniteWhitelistStatus(address,bytes32,address,address)\":{\"notice\":\"Returns if an account has indefinitely whitelisted `requester` for the `airnode`\\u2013`endpointId` pair\"},\"airnodeToEndpointIdToRequesterToWhitelistStatus(address,bytes32,address)\":{\"notice\":\"Returns the whitelist status of `requester` for the `airnode`\\u2013`endpointId` pair\"},\"deriveAdminRole(address)\":{\"notice\":\"Derives the admin role for the Airnode\"},\"deriveIndefiniteWhitelisterRole(address)\":{\"notice\":\"Derives the indefinite whitelister role for the Airnode\"},\"deriveWhitelistExpirationExtenderRole(address)\":{\"notice\":\"Derives the whitelist expiration extender role for the Airnode\"},\"deriveWhitelistExpirationSetterRole(address)\":{\"notice\":\"Derives the whitelist expiration setter role for the Airnode\"},\"extendWhitelistExpiration(address,bytes32,address,uint64)\":{\"notice\":\"Extends the expiration of the temporary whitelist of `requester` for the `airnode`\\u2013`endpointId` pair if the sender has the whitelist expiration extender role\"},\"isAuthorized(address,bytes32,address)\":{\"notice\":\"Verifies the authorization status of a request\"},\"isAuthorizedV0(bytes32,address,bytes32,address,address)\":{\"notice\":\"Verifies the authorization status of a request\"},\"revokeIndefiniteWhitelistStatus(address,bytes32,address,address)\":{\"notice\":\"Revokes the indefinite whitelist status granted by a specific account that no longer has the indefinite whitelister role\"},\"setIndefiniteWhitelistStatus(address,bytes32,address,bool)\":{\"notice\":\"Sets the indefinite whitelist status of `requester` for the `airnode`\\u2013`endpointId` pair if the sender has the indefinite whitelister role\"},\"setWhitelistExpiration(address,bytes32,address,uint64)\":{\"notice\":\"Sets the expiration of the temporary whitelist of `requester` for the `airnode`\\u2013`endpointId` pair if the sender has the whitelist expiration setter role\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/authorizers/RequesterAuthorizerWithAirnode.sol\":\"RequesterAuthorizerWithAirnode\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/IAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0x59ce320a585d7e1f163cd70390a0ef2ff9cec832e2aa544293a00692465a7a57\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Address.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x51b758a8815ecc9596c66c37d56b1d33883a444631a3f916b9fe65cb863ef7c4\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Multicall.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Multicall.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./Address.sol\\\";\\n\\n/**\\n * @dev Provides a function to batch together multiple calls in a single external call.\\n *\\n * _Available since v4.1._\\n */\\nabstract contract Multicall {\\n    /**\\n     * @dev Receives and executes a batch of function calls on this contract.\\n     */\\n    function multicall(bytes[] calldata data) external returns (bytes[] memory results) {\\n        results = new bytes[](data.length);\\n        for (uint256 i = 0; i < data.length; i++) {\\n            results[i] = Address.functionDelegateCall(address(this), data[i]);\\n        }\\n        return results;\\n    }\\n}\\n\",\"keccak256\":\"0x768ccb0d556d2edde43cf5fc16860a936ce91eca96be0cf9e807ffe875f6f516\",\"license\":\"MIT\"},\"contracts/access-control-registry/AccessControlRegistryAdminned.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/utils/Multicall.sol\\\";\\nimport \\\"./RoleDeriver.sol\\\";\\nimport \\\"./AccessControlRegistryUser.sol\\\";\\nimport \\\"./interfaces/IAccessControlRegistryAdminned.sol\\\";\\n\\n/// @title Contract to be inherited by contracts whose adminship functionality\\n/// will be implemented using AccessControlRegistry\\ncontract AccessControlRegistryAdminned is\\n    Multicall,\\n    RoleDeriver,\\n    AccessControlRegistryUser,\\n    IAccessControlRegistryAdminned\\n{\\n    /// @notice Admin role description\\n    string public override adminRoleDescription;\\n\\n    bytes32 internal immutable adminRoleDescriptionHash;\\n\\n    /// @dev Contracts deployed with the same admin role descriptions will have\\n    /// the same roles, meaning that granting an account a role will authorize\\n    /// it in multiple contracts. Unless you want your deployed contract to\\n    /// share the role configuration of another contract, use a unique admin\\n    /// role description.\\n    /// @param _accessControlRegistry AccessControlRegistry contract address\\n    /// @param _adminRoleDescription Admin role description\\n    constructor(\\n        address _accessControlRegistry,\\n        string memory _adminRoleDescription\\n    ) AccessControlRegistryUser(_accessControlRegistry) {\\n        require(\\n            bytes(_adminRoleDescription).length > 0,\\n            \\\"Admin role description empty\\\"\\n        );\\n        adminRoleDescription = _adminRoleDescription;\\n        adminRoleDescriptionHash = keccak256(\\n            abi.encodePacked(_adminRoleDescription)\\n        );\\n    }\\n\\n    /// @notice Derives the admin role for the specific manager address\\n    /// @param manager Manager address\\n    /// @return adminRole Admin role\\n    function _deriveAdminRole(address manager)\\n        internal\\n        view\\n        returns (bytes32 adminRole)\\n    {\\n        adminRole = _deriveRole(\\n            _deriveRootRole(manager),\\n            adminRoleDescriptionHash\\n        );\\n    }\\n}\\n\",\"keccak256\":\"0xf09ba7f972b6bc37041596f5fd8757192fe1c63009b75752dc6f57b4eb4bb6cd\",\"license\":\"MIT\"},\"contracts/access-control-registry/AccessControlRegistryUser.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./interfaces/IAccessControlRegistry.sol\\\";\\nimport \\\"./interfaces/IAccessControlRegistryUser.sol\\\";\\n\\n/// @title Contract to be inherited by contracts that will interact with\\n/// AccessControlRegistry\\ncontract AccessControlRegistryUser is IAccessControlRegistryUser {\\n    /// @notice AccessControlRegistry contract address\\n    address public immutable override accessControlRegistry;\\n\\n    /// @param _accessControlRegistry AccessControlRegistry contract address\\n    constructor(address _accessControlRegistry) {\\n        require(_accessControlRegistry != address(0), \\\"ACR address zero\\\");\\n        accessControlRegistry = _accessControlRegistry;\\n    }\\n}\\n\",\"keccak256\":\"0x43744b38d8d71226bc8fb80942d5444a50cd1255f3bded0aee390f897d142802\",\"license\":\"MIT\"},\"contracts/access-control-registry/RoleDeriver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n/// @title Contract to be inherited by contracts that will derive\\n/// AccessControlRegistry roles\\n/// @notice If a contract interfaces with AccessControlRegistry and needs to\\n/// derive roles, it should inherit this contract instead of re-implementing\\n/// the logic\\ncontract RoleDeriver {\\n    /// @notice Derives the root role of the manager\\n    /// @param manager Manager address\\n    /// @return rootRole Root role\\n    function _deriveRootRole(address manager)\\n        internal\\n        pure\\n        returns (bytes32 rootRole)\\n    {\\n        rootRole = keccak256(abi.encodePacked(manager));\\n    }\\n\\n    /// @notice Derives the role using its admin role and description\\n    /// @dev This implies that roles adminned by the same role cannot have the\\n    /// same description\\n    /// @param adminRole Admin role\\n    /// @param description Human-readable description of the role\\n    /// @return role Role\\n    function _deriveRole(bytes32 adminRole, string memory description)\\n        internal\\n        pure\\n        returns (bytes32 role)\\n    {\\n        role = _deriveRole(adminRole, keccak256(abi.encodePacked(description)));\\n    }\\n\\n    /// @notice Derives the role using its admin role and description hash\\n    /// @dev This implies that roles adminned by the same role cannot have the\\n    /// same description\\n    /// @param adminRole Admin role\\n    /// @param descriptionHash Hash of the human-readable description of the\\n    /// role\\n    /// @return role Role\\n    function _deriveRole(bytes32 adminRole, bytes32 descriptionHash)\\n        internal\\n        pure\\n        returns (bytes32 role)\\n    {\\n        role = keccak256(abi.encodePacked(adminRole, descriptionHash));\\n    }\\n}\\n\",\"keccak256\":\"0x20fe9d6cce9a1e4fe0b5bd8868fabbe6ee9db7fa8154bcf6316005307d63ee04\",\"license\":\"MIT\"},\"contracts/access-control-registry/interfaces/IAccessControlRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/access/IAccessControl.sol\\\";\\n\\ninterface IAccessControlRegistry is IAccessControl {\\n    event InitializedManager(bytes32 indexed rootRole, address indexed manager);\\n\\n    event InitializedRole(\\n        bytes32 indexed role,\\n        bytes32 indexed adminRole,\\n        string description,\\n        address sender\\n    );\\n\\n    function initializeManager(address manager) external;\\n\\n    function initializeRoleAndGrantToSender(\\n        bytes32 adminRole,\\n        string calldata description\\n    ) external returns (bytes32 role);\\n\\n    function deriveRootRole(address manager)\\n        external\\n        pure\\n        returns (bytes32 rootRole);\\n\\n    function deriveRole(bytes32 adminRole, string calldata description)\\n        external\\n        pure\\n        returns (bytes32 role);\\n}\\n\",\"keccak256\":\"0x51b6c37b03f81667920dac10d53efc75e403c11348e71311b39a25c9b1cfdf76\",\"license\":\"MIT\"},\"contracts/access-control-registry/interfaces/IAccessControlRegistryAdminned.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControlRegistryUser.sol\\\";\\n\\ninterface IAccessControlRegistryAdminned is IAccessControlRegistryUser {\\n    function adminRoleDescription() external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x0f3ad45d6e1a4815cfaff171926ad5352d499a431b041b11adb316f4569bcce4\",\"license\":\"MIT\"},\"contracts/access-control-registry/interfaces/IAccessControlRegistryUser.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IAccessControlRegistryUser {\\n    function accessControlRegistry() external view returns (address);\\n}\\n\",\"keccak256\":\"0xce1ceb04823a801ea173fe5140344645295768ff1b4d2ee2969c2f4b362102ca\",\"license\":\"MIT\"},\"contracts/authorizers/RequesterAuthorizer.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"../whitelist/Whitelist.sol\\\";\\nimport \\\"./interfaces/IRequesterAuthorizer.sol\\\";\\n\\n/// @title Abstract contract to be inherited by Authorizer contracts that\\n/// temporarily or permanently whitelist requesters for Airnode\\u2013endpoint pairs\\nabstract contract RequesterAuthorizer is Whitelist, IRequesterAuthorizer {\\n    /// @notice Extends the expiration of the temporary whitelist of\\n    /// `requester` for the `airnode`\\u2013`endpointId` pair and emits an event\\n    /// @param airnode Airnode address\\n    /// @param endpointId Endpoint ID (allowed to be `bytes32(0)`)\\n    /// @param requester Requester address\\n    /// @param expirationTimestamp Timestamp at which the temporary whitelist\\n    /// will expire\\n    function _extendWhitelistExpirationAndEmit(\\n        address airnode,\\n        bytes32 endpointId,\\n        address requester,\\n        uint64 expirationTimestamp\\n    ) internal {\\n        require(airnode != address(0), \\\"Airnode address zero\\\");\\n        require(requester != address(0), \\\"Requester address zero\\\");\\n        _extendWhitelistExpiration(\\n            deriveServiceId(airnode, endpointId),\\n            requester,\\n            expirationTimestamp\\n        );\\n        emit ExtendedWhitelistExpiration(\\n            airnode,\\n            endpointId,\\n            requester,\\n            msg.sender,\\n            expirationTimestamp\\n        );\\n    }\\n\\n    /// @notice Sets the expiration of the temporary whitelist of `requester`\\n    /// for the `airnode`\\u2013`endpointId` pair and emits an event\\n    /// @dev Unlike `_extendWhitelistExpiration()`, this can hasten expiration\\n    /// @param airnode Airnode address\\n    /// @param endpointId Endpoint ID (allowed to be `bytes32(0)`)\\n    /// @param requester Requester address\\n    /// @param expirationTimestamp Timestamp at which the temporary whitelist\\n    /// will expire\\n    function _setWhitelistExpirationAndEmit(\\n        address airnode,\\n        bytes32 endpointId,\\n        address requester,\\n        uint64 expirationTimestamp\\n    ) internal {\\n        require(airnode != address(0), \\\"Airnode address zero\\\");\\n        require(requester != address(0), \\\"Requester address zero\\\");\\n        _setWhitelistExpiration(\\n            deriveServiceId(airnode, endpointId),\\n            requester,\\n            expirationTimestamp\\n        );\\n        emit SetWhitelistExpiration(\\n            airnode,\\n            endpointId,\\n            requester,\\n            msg.sender,\\n            expirationTimestamp\\n        );\\n    }\\n\\n    /// @notice Sets the indefinite whitelist status of `requester` for the\\n    /// `airnode`\\u2013`endpointId` pair and emits an event\\n    /// @dev Emits the event even if it does not change the state.\\n    /// @param airnode Airnode address\\n    /// @param endpointId Endpoint ID (allowed to be `bytes32(0)`)\\n    /// @param requester Requester address\\n    /// @param status Indefinite whitelist status\\n    function _setIndefiniteWhitelistStatusAndEmit(\\n        address airnode,\\n        bytes32 endpointId,\\n        address requester,\\n        bool status\\n    ) internal {\\n        require(airnode != address(0), \\\"Airnode address zero\\\");\\n        require(requester != address(0), \\\"Requester address zero\\\");\\n        uint192 indefiniteWhitelistCount = _setIndefiniteWhitelistStatus(\\n            deriveServiceId(airnode, endpointId),\\n            requester,\\n            status\\n        );\\n        emit SetIndefiniteWhitelistStatus(\\n            airnode,\\n            endpointId,\\n            requester,\\n            msg.sender,\\n            status,\\n            indefiniteWhitelistCount\\n        );\\n    }\\n\\n    /// @notice Revokes the indefinite whitelist status granted to `requester`\\n    /// for the `airnode`\\u2013`endpointId` pair by a specific account and emits an\\n    /// event\\n    /// @dev Only emits the event if it changes the state\\n    /// @param airnode Airnode address\\n    /// @param endpointId Endpoint ID (allowed to be `bytes32(0)`)\\n    /// @param requester Requester address\\n    /// @param setter Setter of the indefinite whitelist status\\n    function _revokeIndefiniteWhitelistStatusAndEmit(\\n        address airnode,\\n        bytes32 endpointId,\\n        address requester,\\n        address setter\\n    ) internal {\\n        require(airnode != address(0), \\\"Airnode address zero\\\");\\n        require(requester != address(0), \\\"Requester address zero\\\");\\n        require(setter != address(0), \\\"Setter address zero\\\");\\n        (\\n            bool revoked,\\n            uint192 indefiniteWhitelistCount\\n        ) = _revokeIndefiniteWhitelistStatus(\\n                deriveServiceId(airnode, endpointId),\\n                requester,\\n                setter\\n            );\\n        if (revoked) {\\n            emit RevokedIndefiniteWhitelistStatus(\\n                airnode,\\n                endpointId,\\n                requester,\\n                setter,\\n                msg.sender,\\n                indefiniteWhitelistCount\\n            );\\n        }\\n    }\\n\\n    /// @notice Verifies the authorization status of a request\\n    /// @param airnode Airnode address\\n    /// @param endpointId Endpoint ID\\n    /// @param requester Requester address\\n    /// @return Authorization status of the request\\n    function isAuthorized(\\n        address airnode,\\n        bytes32 endpointId,\\n        address requester\\n    ) external view override returns (bool) {\\n        return\\n            userIsWhitelisted(deriveServiceId(airnode, endpointId), requester);\\n    }\\n\\n    /// @notice Verifies the authorization status of a request\\n    /// @dev This method has redundant arguments because V0 authorizer\\n    /// contracts have to have the same interface and potential authorizer\\n    /// contracts may require to access the arguments that are redundant here\\n    /// @param requestId Request ID\\n    /// @param airnode Airnode address\\n    /// @param endpointId Endpoint ID\\n    /// @param sponsor Sponsor address\\n    /// @param requester Requester address\\n    /// @return Authorization status of the request\\n    function isAuthorizedV0(\\n        bytes32 requestId, // solhint-disable-line no-unused-vars\\n        address airnode,\\n        bytes32 endpointId,\\n        address sponsor, // solhint-disable-line no-unused-vars\\n        address requester\\n    ) external view override returns (bool) {\\n        return\\n            userIsWhitelisted(deriveServiceId(airnode, endpointId), requester);\\n    }\\n\\n    /// @notice Returns the whitelist status of `requester` for the\\n    /// `airnode`\\u2013`endpointId` pair\\n    /// @param airnode Airnode address\\n    /// @param endpointId Endpoint ID\\n    /// @param requester Requester address\\n    /// @return expirationTimestamp Timestamp at which the temporary whitelist\\n    /// will expire\\n    /// @return indefiniteWhitelistCount Number of times `requester` was\\n    /// whitelisted indefinitely for the `airnode`\\u2013`endpointId` pair\\n    function airnodeToEndpointIdToRequesterToWhitelistStatus(\\n        address airnode,\\n        bytes32 endpointId,\\n        address requester\\n    )\\n        external\\n        view\\n        override\\n        returns (uint64 expirationTimestamp, uint192 indefiniteWhitelistCount)\\n    {\\n        WhitelistStatus\\n            storage whitelistStatus = serviceIdToUserToWhitelistStatus[\\n                deriveServiceId(airnode, endpointId)\\n            ][requester];\\n        expirationTimestamp = whitelistStatus.expirationTimestamp;\\n        indefiniteWhitelistCount = whitelistStatus.indefiniteWhitelistCount;\\n    }\\n\\n    /// @notice Returns if an account has indefinitely whitelisted `requester`\\n    /// for the `airnode`\\u2013`endpointId` pair\\n    /// @param airnode Airnode address\\n    /// @param endpointId Endpoint ID\\n    /// @param requester Requester address\\n    /// @param setter Address of the account that has potentially whitelisted\\n    /// `requester` for the `airnode`\\u2013`endpointId` pair indefinitely\\n    /// @return indefiniteWhitelistStatus If `setter` has indefinitely\\n    /// whitelisted `requester` for the `airnode`\\u2013`endpointId` pair\\n    function airnodeToEndpointIdToRequesterToSetterToIndefiniteWhitelistStatus(\\n        address airnode,\\n        bytes32 endpointId,\\n        address requester,\\n        address setter\\n    ) external view override returns (bool indefiniteWhitelistStatus) {\\n        indefiniteWhitelistStatus = serviceIdToUserToSetterToIndefiniteWhitelistStatus[\\n            deriveServiceId(airnode, endpointId)\\n        ][requester][setter];\\n    }\\n\\n    /// @notice Called privately to derive a service ID out of the Airnode\\n    /// address and the endpoint ID\\n    /// @dev This is done to re-use the more general Whitelist contract for\\n    /// the specific case of Airnode\\u2013endpoint pairs\\n    /// @param airnode Airnode address\\n    /// @param endpointId Endpoint ID\\n    /// @return serviceId Service ID\\n    function deriveServiceId(address airnode, bytes32 endpointId)\\n        private\\n        pure\\n        returns (bytes32 serviceId)\\n    {\\n        serviceId = keccak256(abi.encodePacked(airnode, endpointId));\\n    }\\n}\\n\",\"keccak256\":\"0x7b75fda3fd3e3aba6814a3baba32a429cdb0141f40cf5d0f4a0a8bf85171882a\",\"license\":\"MIT\"},\"contracts/authorizers/RequesterAuthorizerWithAirnode.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.9;\\n\\nimport \\\"../whitelist/WhitelistRolesWithAirnode.sol\\\";\\nimport \\\"./RequesterAuthorizer.sol\\\";\\nimport \\\"./interfaces/IRequesterAuthorizerWithAirnode.sol\\\";\\n\\n/// @title Authorizer contract that Airnode operators can use to temporarily or\\n/// indefinitely whitelist requesters for Airnode\\u2013endpoint pairs\\ncontract RequesterAuthorizerWithAirnode is\\n    WhitelistRolesWithAirnode,\\n    RequesterAuthorizer,\\n    IRequesterAuthorizerWithAirnode\\n{\\n    /// @param _accessControlRegistry AccessControlRegistry contract address\\n    /// @param _adminRoleDescription Admin role description\\n    constructor(\\n        address _accessControlRegistry,\\n        string memory _adminRoleDescription\\n    )\\n        WhitelistRolesWithAirnode(_accessControlRegistry, _adminRoleDescription)\\n    {}\\n\\n    /// @notice Extends the expiration of the temporary whitelist of\\n    /// `requester` for the `airnode`\\u2013`endpointId` pair if the sender has the\\n    /// whitelist expiration extender role\\n    /// @param airnode Airnode address\\n    /// @param endpointId Endpoint ID\\n    /// @param requester Requester address\\n    /// @param expirationTimestamp Timestamp at which the temporary whitelist\\n    /// will expire\\n    function extendWhitelistExpiration(\\n        address airnode,\\n        bytes32 endpointId,\\n        address requester,\\n        uint64 expirationTimestamp\\n    ) external override {\\n        require(\\n            hasWhitelistExpirationExtenderRoleOrIsAirnode(airnode, msg.sender),\\n            \\\"Cannot extend expiration\\\"\\n        );\\n        _extendWhitelistExpirationAndEmit(\\n            airnode,\\n            endpointId,\\n            requester,\\n            expirationTimestamp\\n        );\\n    }\\n\\n    /// @notice Sets the expiration of the temporary whitelist of `requester`\\n    /// for the `airnode`\\u2013`endpointId` pair if the sender has the whitelist\\n    /// expiration setter role\\n    /// @dev Unlike `extendWhitelistExpiration()`, this can hasten expiration\\n    /// @param airnode Airnode address\\n    /// @param endpointId Endpoint ID\\n    /// @param requester Requester address\\n    /// @param expirationTimestamp Timestamp at which the temporary whitelist\\n    /// will expire\\n    function setWhitelistExpiration(\\n        address airnode,\\n        bytes32 endpointId,\\n        address requester,\\n        uint64 expirationTimestamp\\n    ) external override {\\n        require(\\n            hasWhitelistExpirationSetterRoleOrIsAirnode(airnode, msg.sender),\\n            \\\"Cannot set expiration\\\"\\n        );\\n        _setWhitelistExpirationAndEmit(\\n            airnode,\\n            endpointId,\\n            requester,\\n            expirationTimestamp\\n        );\\n    }\\n\\n    /// @notice Sets the indefinite whitelist status of `requester` for the\\n    /// `airnode`\\u2013`endpointId` pair if the sender has the indefinite\\n    /// whitelister role\\n    /// @param airnode Airnode address\\n    /// @param endpointId Endpoint ID\\n    /// @param requester Requester address\\n    /// @param status Indefinite whitelist status\\n    function setIndefiniteWhitelistStatus(\\n        address airnode,\\n        bytes32 endpointId,\\n        address requester,\\n        bool status\\n    ) external override {\\n        require(\\n            hasIndefiniteWhitelisterRoleOrIsAirnode(airnode, msg.sender),\\n            \\\"Cannot set indefinite status\\\"\\n        );\\n        _setIndefiniteWhitelistStatusAndEmit(\\n            airnode,\\n            endpointId,\\n            requester,\\n            status\\n        );\\n    }\\n\\n    /// @notice Revokes the indefinite whitelist status granted by a specific\\n    /// account that no longer has the indefinite whitelister role\\n    /// @param airnode Airnode address\\n    /// @param endpointId Endpoint ID\\n    /// @param requester Requester address\\n    /// @param setter Setter of the indefinite whitelist status\\n    function revokeIndefiniteWhitelistStatus(\\n        address airnode,\\n        bytes32 endpointId,\\n        address requester,\\n        address setter\\n    ) external override {\\n        require(\\n            !hasIndefiniteWhitelisterRoleOrIsAirnode(airnode, setter),\\n            \\\"setter can set indefinite status\\\"\\n        );\\n        _revokeIndefiniteWhitelistStatusAndEmit(\\n            airnode,\\n            endpointId,\\n            requester,\\n            setter\\n        );\\n    }\\n}\\n\",\"keccak256\":\"0xe54f7461125993102c504232e5a93bdca77703e95fcb99fcb1ed196e2f5e09d9\",\"license\":\"MIT\"},\"contracts/authorizers/interfaces/IAuthorizerV0.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IAuthorizerV0 {\\n    function isAuthorizedV0(\\n        bytes32 requestId,\\n        address airnode,\\n        bytes32 endpointId,\\n        address sponsor,\\n        address requester\\n    ) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xa38872f5dead4dfc0c8075c245c10197df1ace09415f2e0d5b46bc8511cc3f6d\",\"license\":\"MIT\"},\"contracts/authorizers/interfaces/IRequesterAuthorizer.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAuthorizerV0.sol\\\";\\n\\ninterface IRequesterAuthorizer is IAuthorizerV0 {\\n    event ExtendedWhitelistExpiration(\\n        address indexed airnode,\\n        bytes32 endpointId,\\n        address indexed requester,\\n        address indexed sender,\\n        uint256 expiration\\n    );\\n\\n    event SetWhitelistExpiration(\\n        address indexed airnode,\\n        bytes32 endpointId,\\n        address indexed requester,\\n        address indexed sender,\\n        uint256 expiration\\n    );\\n\\n    event SetIndefiniteWhitelistStatus(\\n        address indexed airnode,\\n        bytes32 endpointId,\\n        address indexed requester,\\n        address indexed sender,\\n        bool status,\\n        uint192 indefiniteWhitelistCount\\n    );\\n\\n    event RevokedIndefiniteWhitelistStatus(\\n        address indexed airnode,\\n        bytes32 endpointId,\\n        address indexed requester,\\n        address indexed setter,\\n        address sender,\\n        uint192 indefiniteWhitelistCount\\n    );\\n\\n    function extendWhitelistExpiration(\\n        address airnode,\\n        bytes32 endpointId,\\n        address requester,\\n        uint64 expirationTimestamp\\n    ) external;\\n\\n    function setWhitelistExpiration(\\n        address airnode,\\n        bytes32 endpointId,\\n        address requester,\\n        uint64 expirationTimestamp\\n    ) external;\\n\\n    function setIndefiniteWhitelistStatus(\\n        address airnode,\\n        bytes32 endpointId,\\n        address requester,\\n        bool status\\n    ) external;\\n\\n    function revokeIndefiniteWhitelistStatus(\\n        address airnode,\\n        bytes32 endpointId,\\n        address requester,\\n        address setter\\n    ) external;\\n\\n    function airnodeToEndpointIdToRequesterToWhitelistStatus(\\n        address airnode,\\n        bytes32 endpointId,\\n        address requester\\n    )\\n        external\\n        view\\n        returns (uint64 expirationTimestamp, uint192 indefiniteWhitelistCount);\\n\\n    function airnodeToEndpointIdToRequesterToSetterToIndefiniteWhitelistStatus(\\n        address airnode,\\n        bytes32 endpointId,\\n        address requester,\\n        address setter\\n    ) external view returns (bool indefiniteWhitelistStatus);\\n\\n    function isAuthorized(\\n        address airnode,\\n        bytes32 endpointId,\\n        address requester\\n    ) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x2aecb3b19965b47a373e0bd346b8a626878cc7aa8e85a2156741f7154cd4ec60\",\"license\":\"MIT\"},\"contracts/authorizers/interfaces/IRequesterAuthorizerWithAirnode.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../whitelist/interfaces/IWhitelistRolesWithAirnode.sol\\\";\\nimport \\\"./IRequesterAuthorizer.sol\\\";\\n\\ninterface IRequesterAuthorizerWithAirnode is\\n    IWhitelistRolesWithAirnode,\\n    IRequesterAuthorizer\\n{}\\n\",\"keccak256\":\"0x5ea885c0792ab843a81ed5294e9edec8be0184aa4f84d51b8cdbe297d002b6e6\",\"license\":\"MIT\"},\"contracts/whitelist/Whitelist.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n/// @title Contract to be inherited by contracts that need temporary and\\n/// permanent whitelists for services identified by hashes\\n/// @notice This contract implements two kinds of whitelisting:\\n///   (1) Temporary, ends when the expiration timestamp is in the past\\n///   (2) Indefinite, ends when the indefinite whitelist count is zero\\n/// Multiple senders can indefinitely whitelist/unwhitelist independently. The\\n/// user will be considered whitelisted as long as there is at least one active\\n/// indefinite whitelisting.\\n/// @dev The interface of this contract is not implemented. It should be\\n/// inherited and its functions should be exposed with a sort of an\\n/// authorization scheme.\\ncontract Whitelist {\\n    struct WhitelistStatus {\\n        uint64 expirationTimestamp;\\n        uint192 indefiniteWhitelistCount;\\n    }\\n\\n    mapping(bytes32 => mapping(address => WhitelistStatus))\\n        internal serviceIdToUserToWhitelistStatus;\\n\\n    mapping(bytes32 => mapping(address => mapping(address => bool)))\\n        internal serviceIdToUserToSetterToIndefiniteWhitelistStatus;\\n\\n    /// @notice Extends the expiration of the temporary whitelist of the user\\n    /// for the service\\n    /// @param serviceId Service ID\\n    /// @param user User address\\n    /// @param expirationTimestamp Timestamp at which the temporary whitelist\\n    /// will expire\\n    function _extendWhitelistExpiration(\\n        bytes32 serviceId,\\n        address user,\\n        uint64 expirationTimestamp\\n    ) internal {\\n        require(\\n            expirationTimestamp >\\n                serviceIdToUserToWhitelistStatus[serviceId][user]\\n                    .expirationTimestamp,\\n            \\\"Does not extend expiration\\\"\\n        );\\n        serviceIdToUserToWhitelistStatus[serviceId][user]\\n            .expirationTimestamp = expirationTimestamp;\\n    }\\n\\n    /// @notice Sets the expiration of the temporary whitelist of the user for\\n    /// the service\\n    /// @dev Unlike `extendWhitelistExpiration()`, this can hasten expiration\\n    /// @param serviceId Service ID\\n    /// @param user User address\\n    /// @param expirationTimestamp Timestamp at which the temporary whitelist\\n    /// will expire\\n    function _setWhitelistExpiration(\\n        bytes32 serviceId,\\n        address user,\\n        uint64 expirationTimestamp\\n    ) internal {\\n        serviceIdToUserToWhitelistStatus[serviceId][user]\\n            .expirationTimestamp = expirationTimestamp;\\n    }\\n\\n    /// @notice Sets the indefinite whitelist status of the user for the\\n    /// service\\n    /// @dev As long as at least there is at least one account that has set the\\n    /// indefinite whitelist status of the user for the service as true, the\\n    /// user will be considered whitelisted\\n    /// @param serviceId Service ID\\n    /// @param user User address\\n    /// @param status Indefinite whitelist status\\n    function _setIndefiniteWhitelistStatus(\\n        bytes32 serviceId,\\n        address user,\\n        bool status\\n    ) internal returns (uint192 indefiniteWhitelistCount) {\\n        indefiniteWhitelistCount = serviceIdToUserToWhitelistStatus[serviceId][\\n            user\\n        ].indefiniteWhitelistCount;\\n        if (\\n            status &&\\n            !serviceIdToUserToSetterToIndefiniteWhitelistStatus[serviceId][\\n                user\\n            ][msg.sender]\\n        ) {\\n            serviceIdToUserToSetterToIndefiniteWhitelistStatus[serviceId][user][\\n                msg.sender\\n            ] = true;\\n            indefiniteWhitelistCount++;\\n            serviceIdToUserToWhitelistStatus[serviceId][user]\\n                .indefiniteWhitelistCount = indefiniteWhitelistCount;\\n        } else if (\\n            !status &&\\n            serviceIdToUserToSetterToIndefiniteWhitelistStatus[serviceId][user][\\n                msg.sender\\n            ]\\n        ) {\\n            serviceIdToUserToSetterToIndefiniteWhitelistStatus[serviceId][user][\\n                msg.sender\\n            ] = false;\\n            indefiniteWhitelistCount--;\\n            serviceIdToUserToWhitelistStatus[serviceId][user]\\n                .indefiniteWhitelistCount = indefiniteWhitelistCount;\\n        }\\n    }\\n\\n    /// @notice Revokes the indefinite whitelist status granted to the user for\\n    /// the service by a specific account\\n    /// @param serviceId Service ID\\n    /// @param user User address\\n    /// @param setter Setter of the indefinite whitelist status\\n    function _revokeIndefiniteWhitelistStatus(\\n        bytes32 serviceId,\\n        address user,\\n        address setter\\n    ) internal returns (bool revoked, uint192 indefiniteWhitelistCount) {\\n        indefiniteWhitelistCount = serviceIdToUserToWhitelistStatus[serviceId][\\n            user\\n        ].indefiniteWhitelistCount;\\n        if (\\n            serviceIdToUserToSetterToIndefiniteWhitelistStatus[serviceId][user][\\n                setter\\n            ]\\n        ) {\\n            serviceIdToUserToSetterToIndefiniteWhitelistStatus[serviceId][user][\\n                setter\\n            ] = false;\\n            indefiniteWhitelistCount--;\\n            serviceIdToUserToWhitelistStatus[serviceId][user]\\n                .indefiniteWhitelistCount = indefiniteWhitelistCount;\\n            revoked = true;\\n        }\\n    }\\n\\n    /// @notice Returns if the user is whitelised to use the service\\n    /// @param serviceId Service ID\\n    /// @param user User address\\n    /// @return isWhitelisted If the user is whitelisted\\n    function userIsWhitelisted(bytes32 serviceId, address user)\\n        internal\\n        view\\n        returns (bool isWhitelisted)\\n    {\\n        WhitelistStatus\\n            storage whitelistStatus = serviceIdToUserToWhitelistStatus[\\n                serviceId\\n            ][user];\\n        return\\n            whitelistStatus.indefiniteWhitelistCount > 0 ||\\n            whitelistStatus.expirationTimestamp > block.timestamp;\\n    }\\n}\\n\",\"keccak256\":\"0x22e3980c4144e2f57a115e51b05f1aeede12fe94fbeb538a287f02e9eff6be89\",\"license\":\"MIT\"},\"contracts/whitelist/WhitelistRoles.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./interfaces/IWhitelistRoles.sol\\\";\\n\\n/// @title Contract to be inherited by Whitelist contracts that will use\\n/// generic AccessControlRegistry roles\\ncontract WhitelistRoles is IWhitelistRoles {\\n    // There are four roles implemented in this contract:\\n    // Root\\n    // \\u2514\\u2500\\u2500 (1) Admin (can grant and revoke the roles below)\\n    //     \\u251c\\u2500\\u2500 (2) Whitelist expiration extender\\n    //     \\u251c\\u2500\\u2500 (3) Whitelist expiration setter\\n    //     \\u2514\\u2500\\u2500 (4) Indefinite whitelister\\n    // Their IDs are derived from the descriptions below. Refer to\\n    // AccessControlRegistry for more information.\\n    // To clarify, the root role of the manager is the admin of (1), while (1)\\n    // is the admin of (2), (3) and (4). So (1) is more of a \\\"contract admin\\\",\\n    // while the `adminRole` used in AccessControl and AccessControlRegistry\\n    // refers to a more general adminship relationship between roles.\\n\\n    /// @notice Whitelist expiration extender role description\\n    string\\n        public constant\\n        override WHITELIST_EXPIRATION_EXTENDER_ROLE_DESCRIPTION =\\n        \\\"Whitelist expiration extender\\\";\\n\\n    /// @notice Whitelist expiration setter role description\\n    string\\n        public constant\\n        override WHITELIST_EXPIRATION_SETTER_ROLE_DESCRIPTION =\\n        \\\"Whitelist expiration setter\\\";\\n\\n    /// @notice Indefinite whitelister role description\\n\\n    string public constant override INDEFINITE_WHITELISTER_ROLE_DESCRIPTION =\\n        \\\"Indefinite whitelister\\\";\\n\\n    bytes32\\n        internal constant WHITELIST_EXPIRATION_EXTENDER_ROLE_DESCRIPTION_HASH =\\n        keccak256(\\n            abi.encodePacked(WHITELIST_EXPIRATION_EXTENDER_ROLE_DESCRIPTION)\\n        );\\n\\n    bytes32\\n        internal constant WHITELIST_EXPIRATION_SETTER_ROLE_DESCRIPTION_HASH =\\n        keccak256(\\n            abi.encodePacked(WHITELIST_EXPIRATION_SETTER_ROLE_DESCRIPTION)\\n        );\\n\\n    bytes32 internal constant INDEFINITE_WHITELISTER_ROLE_DESCRIPTION_HASH =\\n        keccak256(abi.encodePacked(INDEFINITE_WHITELISTER_ROLE_DESCRIPTION));\\n}\\n\",\"keccak256\":\"0x2d52cc38e7cc74630a9e268b527da5f091c4916d5e2f946a0f5f3e8a1a9debc3\",\"license\":\"MIT\"},\"contracts/whitelist/WhitelistRolesWithAirnode.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./WhitelistRoles.sol\\\";\\nimport \\\"../access-control-registry/AccessControlRegistryAdminned.sol\\\";\\nimport \\\"./interfaces/IWhitelistRolesWithAirnode.sol\\\";\\nimport \\\"../access-control-registry/interfaces/IAccessControlRegistry.sol\\\";\\n\\n/// @title Contract to be inherited by Whitelist contracts that will use\\n/// roles where each individual Airnode address is its own manager\\ncontract WhitelistRolesWithAirnode is\\n    WhitelistRoles,\\n    AccessControlRegistryAdminned,\\n    IWhitelistRolesWithAirnode\\n{\\n    /// @param _accessControlRegistry AccessControlRegistry contract address\\n    /// @param _adminRoleDescription Admin role description\\n    constructor(\\n        address _accessControlRegistry,\\n        string memory _adminRoleDescription\\n    )\\n        AccessControlRegistryAdminned(\\n            _accessControlRegistry,\\n            _adminRoleDescription\\n        )\\n    {}\\n\\n    /// @notice Derives the admin role for the Airnode\\n    /// @param airnode Airnode address\\n    /// @return adminRole Admin role\\n    function deriveAdminRole(address airnode)\\n        external\\n        view\\n        override\\n        returns (bytes32 adminRole)\\n    {\\n        adminRole = _deriveAdminRole(airnode);\\n    }\\n\\n    /// @notice Derives the whitelist expiration extender role for the Airnode\\n    /// @param airnode Airnode address\\n    /// @return whitelistExpirationExtenderRole Whitelist expiration extender\\n    /// role\\n    function deriveWhitelistExpirationExtenderRole(address airnode)\\n        public\\n        view\\n        override\\n        returns (bytes32 whitelistExpirationExtenderRole)\\n    {\\n        whitelistExpirationExtenderRole = _deriveRole(\\n            _deriveAdminRole(airnode),\\n            WHITELIST_EXPIRATION_EXTENDER_ROLE_DESCRIPTION_HASH\\n        );\\n    }\\n\\n    /// @notice Derives the whitelist expiration setter role for the Airnode\\n    /// @param airnode Airnode address\\n    /// @return whitelistExpirationSetterRole Whitelist expiration setter role\\n    function deriveWhitelistExpirationSetterRole(address airnode)\\n        public\\n        view\\n        override\\n        returns (bytes32 whitelistExpirationSetterRole)\\n    {\\n        whitelistExpirationSetterRole = _deriveRole(\\n            _deriveAdminRole(airnode),\\n            WHITELIST_EXPIRATION_SETTER_ROLE_DESCRIPTION_HASH\\n        );\\n    }\\n\\n    /// @notice Derives the indefinite whitelister role for the Airnode\\n    /// @param airnode Airnode address\\n    /// @return indefiniteWhitelisterRole Indefinite whitelister role\\n    function deriveIndefiniteWhitelisterRole(address airnode)\\n        public\\n        view\\n        override\\n        returns (bytes32 indefiniteWhitelisterRole)\\n    {\\n        indefiniteWhitelisterRole = _deriveRole(\\n            _deriveAdminRole(airnode),\\n            INDEFINITE_WHITELISTER_ROLE_DESCRIPTION_HASH\\n        );\\n    }\\n\\n    /// @dev Returns if the account has the whitelist expiration extender role\\n    /// or is the Airnode address\\n    /// @param airnode Airnode address\\n    /// @param account Account address\\n    /// @return If the account has the whitelist extender role or is the\\n    /// Airnode address\\n    function hasWhitelistExpirationExtenderRoleOrIsAirnode(\\n        address airnode,\\n        address account\\n    ) internal view returns (bool) {\\n        return\\n            airnode == account ||\\n            IAccessControlRegistry(accessControlRegistry).hasRole(\\n                deriveWhitelistExpirationExtenderRole(airnode),\\n                account\\n            );\\n    }\\n\\n    /// @dev Returns if the account has the whitelist expriation setter role or\\n    /// is the Airnode address\\n    /// @param airnode Airnode address\\n    /// @param account Account address\\n    /// @return If the account has the whitelist setter role or is the Airnode\\n    /// address\\n    function hasWhitelistExpirationSetterRoleOrIsAirnode(\\n        address airnode,\\n        address account\\n    ) internal view returns (bool) {\\n        return\\n            airnode == account ||\\n            IAccessControlRegistry(accessControlRegistry).hasRole(\\n                deriveWhitelistExpirationSetterRole(airnode),\\n                account\\n            );\\n    }\\n\\n    /// @dev Returns if the account has the indefinite whitelister role or is the\\n    /// Airnode address\\n    /// @param airnode Airnode address\\n    /// @param account Account address\\n    /// @return If the account has the indefinite whitelister role or is the\\n    /// Airnode addrss\\n    function hasIndefiniteWhitelisterRoleOrIsAirnode(\\n        address airnode,\\n        address account\\n    ) internal view returns (bool) {\\n        return\\n            airnode == account ||\\n            IAccessControlRegistry(accessControlRegistry).hasRole(\\n                deriveIndefiniteWhitelisterRole(airnode),\\n                account\\n            );\\n    }\\n}\\n\",\"keccak256\":\"0xc6f268bcf4826e93c71352a0d4b7b8adae32895f560d8eba9ba6ed7b0a454e32\",\"license\":\"MIT\"},\"contracts/whitelist/interfaces/IWhitelistRoles.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IWhitelistRoles {\\n    // solhint-disable-next-line func-name-mixedcase\\n    function WHITELIST_EXPIRATION_EXTENDER_ROLE_DESCRIPTION()\\n        external\\n        view\\n        returns (string memory);\\n\\n    // solhint-disable-next-line func-name-mixedcase\\n    function WHITELIST_EXPIRATION_SETTER_ROLE_DESCRIPTION()\\n        external\\n        view\\n        returns (string memory);\\n\\n    // solhint-disable-next-line func-name-mixedcase\\n    function INDEFINITE_WHITELISTER_ROLE_DESCRIPTION()\\n        external\\n        view\\n        returns (string memory);\\n}\\n\",\"keccak256\":\"0x1143190e909f6aa779e99d143fdb26a91e42d269814a0d76152d31418db39fbf\",\"license\":\"MIT\"},\"contracts/whitelist/interfaces/IWhitelistRolesWithAirnode.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IWhitelistRoles.sol\\\";\\nimport \\\"../../access-control-registry/interfaces/IAccessControlRegistryAdminned.sol\\\";\\n\\ninterface IWhitelistRolesWithAirnode is\\n    IWhitelistRoles,\\n    IAccessControlRegistryAdminned\\n{\\n    function deriveAdminRole(address airnode)\\n        external\\n        view\\n        returns (bytes32 role);\\n\\n    function deriveWhitelistExpirationExtenderRole(address airnode)\\n        external\\n        view\\n        returns (bytes32 role);\\n\\n    function deriveWhitelistExpirationSetterRole(address airnode)\\n        external\\n        view\\n        returns (bytes32 role);\\n\\n    function deriveIndefiniteWhitelisterRole(address airnode)\\n        external\\n        view\\n        returns (bytes32 role);\\n}\\n\",\"keccak256\":\"0x019f362313bde834e12b45eec821ab20e75e6e54b11de7a2df33b39d516e5d09\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101365760003560e01c80636db798f9116100b25780639caa101b11610081578063b6316d8811610066578063b6316d8814610332578063d55a42dd14610345578063f57a044a1461038157600080fd5b80639caa101b146102ff578063ac9650d81461031257600080fd5b80636db798f91461026257806373c0627e1461029e5780637e766bc1146102b157806382d229e3146102c457600080fd5b80634751c2e2116101095780634cffd606116100ee5780634cffd606146101f257806352300976146102135780636bd2bdd01461022657600080fd5b80634751c2e2146101ca5780634c8f1d8d146101dd57600080fd5b80631ce9ae071461013b578063216de27e1461017f57806329b915b3146101a257806343b64962146101b5575b600080fd5b6101627f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b0390911681526020015b60405180910390f35b61019261018d366004611540565b610394565b6040519015158152602001610176565b6101926101b036600461158d565b6103e1565b6101c86101c33660046115f5565b610400565b005b6101c86101d8366004611644565b61046d565b6101e56104cf565b60405161017691906116ed565b610205610200366004611700565b61055d565b604051908152602001610176565b610205610221366004611700565b61056e565b6101e56040518060400160405280601b81526020017f57686974656c6973742065787069726174696f6e20736574746572000000000081525081565b6101e56040518060400160405280601d81526020017f57686974656c6973742065787069726174696f6e20657874656e64657200000081525081565b6101c86102ac366004611644565b6105dd565b6101c86102bf366004611540565b61063f565b6102d76102d236600461171b565b6106a2565b6040805167ffffffffffffffff90931683526001600160c01b03909116602083015201610176565b61020561030d366004611700565b610706565b610325610320366004611757565b61075a565b60405161017691906117cc565b610205610340366004611700565b61084f565b6101e56040518060400160405280601681526020017f496e646566696e6974652077686974656c69737465720000000000000000000081525081565b61019261038f36600461171b565b6108a3565b6000600260006103a487876108bc565b8152602080820192909252604090810160009081206001600160a01b03968716825283528181209490951685529290525090205460ff1692915050565b60006103f66103f086866108bc565b83610904565b9695505050505050565b61040a8433610959565b61045b5760405162461bcd60e51b815260206004820152601c60248201527f43616e6e6f742073657420696e646566696e697465207374617475730000000060448201526064015b60405180910390fd5b61046784848484610a44565b50505050565b6104778433610b79565b6104c35760405162461bcd60e51b815260206004820152601560248201527f43616e6e6f74207365742065787069726174696f6e00000000000000000000006044820152606401610452565b61046784848484610bce565b600080546104dc9061182e565b80601f01602080910402602001604051908101604052809291908181526020018280546105089061182e565b80156105555780601f1061052a57610100808354040283529160200191610555565b820191906000526020600020905b81548152906001019060200180831161053857829003601f168201915b505050505081565b600061056882610d18565b92915050565b600061056861057c83610d18565b6040518060400160405280601d81526020017f57686974656c6973742065787069726174696f6e20657874656e6465720000008152506040516020016105c29190611869565b60405160208183030381529060405280519060200120610d82565b6105e78433610d9e565b6106335760405162461bcd60e51b815260206004820152601860248201527f43616e6e6f7420657874656e642065787069726174696f6e00000000000000006044820152606401610452565b61046784848484610df3565b6106498482610959565b156106965760405162461bcd60e51b815260206004820181905260248201527f7365747465722063616e2073657420696e646566696e697465207374617475736044820152606401610452565b61046784848484610efb565b6000806000600160006106b588886108bc565b8152602080820192909252604090810160009081206001600160a01b03979097168152959091529093205467ffffffffffffffff811696600160401b9091046001600160c01b031695509350505050565b600061056861071483610d18565b6040518060400160405280601681526020017f496e646566696e6974652077686974656c6973746572000000000000000000008152506040516020016105c29190611869565b60608167ffffffffffffffff81111561077557610775611885565b6040519080825280602002602001820160405280156107a857816020015b60608152602001906001900390816107935790505b50905060005b8281101561084857610818308585848181106107cc576107cc61189b565b90506020028101906107de91906118b1565b8080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061107992505050565b82828151811061082a5761082a61189b565b6020026020010181905250808061084090611915565b9150506107ae565b5092915050565b600061056861085d83610d18565b6040518060400160405280601b81526020017f57686974656c6973742065787069726174696f6e2073657474657200000000008152506040516020016105c29190611869565b60006108b26103f085856108bc565b90505b9392505050565b6040516bffffffffffffffffffffffff19606084901b166020820152603481018290526000906054015b60405160208183030381529060405280519060200120905092915050565b60008281526001602090815260408083206001600160a01b038516845290915281208054600160401b90046001600160c01b0316151580610951575080544267ffffffffffffffff909116115b949350505050565b6000816001600160a01b0316836001600160a01b031614806108b557507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166391d148546109ae85610706565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e084901b16815260048101919091526001600160a01b038516602482015260440160206040518083038186803b158015610a0c57600080fd5b505afa158015610a20573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108b59190611930565b6001600160a01b038416610a915760405162461bcd60e51b81526020600482015260146024820152734169726e6f64652061646472657373207a65726f60601b6044820152606401610452565b6001600160a01b038216610ae75760405162461bcd60e51b815260206004820152601660248201527f5265717565737465722061646472657373207a65726f000000000000000000006044820152606401610452565b6000610afd610af686866108bc565b848461109e565b9050336001600160a01b0316836001600160a01b0316866001600160a01b03167f13d4d6afcb6d196f753a522f275673066719bb13944bd021efd1fca4286df20d878686604051610b6a9392919092835290151560208301526001600160c01b0316604082015260600190565b60405180910390a45050505050565b6000816001600160a01b0316836001600160a01b031614806108b557507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166391d148546109ae8561084f565b6001600160a01b038416610c1b5760405162461bcd60e51b81526020600482015260146024820152734169726e6f64652061646472657373207a65726f60601b6044820152606401610452565b6001600160a01b038216610c715760405162461bcd60e51b815260206004820152601660248201527f5265717565737465722061646472657373207a65726f000000000000000000006044820152606401610452565b610cbd610c7e85856108bc565b60009081526001602090815260408083206001600160a01b03871684529091529020805467ffffffffffffffff191667ffffffffffffffff8416179055565b6040805184815267ffffffffffffffff8316602082015233916001600160a01b0385811692908816917f375ee45428e158031095010484fd6451af89c501c79d75e390da4e91eb480ce191015b60405180910390a450505050565b6000610568610d60836040516bffffffffffffffffffffffff19606083901b166020820152600090603401604051602081830303815290604052805190602001209050919050565b7f00000000000000000000000000000000000000000000000000000000000000005b60408051602081018490529081018290526000906060016108e6565b6000816001600160a01b0316836001600160a01b031614806108b557507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166391d148546109ae8561056e565b6001600160a01b038416610e405760405162461bcd60e51b81526020600482015260146024820152734169726e6f64652061646472657373207a65726f60601b6044820152606401610452565b6001600160a01b038216610e965760405162461bcd60e51b815260206004820152601660248201527f5265717565737465722061646472657373207a65726f000000000000000000006044820152606401610452565b610eaa610ea385856108bc565b83836112a2565b6040805184815267ffffffffffffffff8316602082015233916001600160a01b0385811692908816917ff9b174be67f83278d4516865d1b9ba4576b73e523ea0c2f124ea29152bb1b6769101610d0a565b6001600160a01b038416610f485760405162461bcd60e51b81526020600482015260146024820152734169726e6f64652061646472657373207a65726f60601b6044820152606401610452565b6001600160a01b038216610f9e5760405162461bcd60e51b815260206004820152601660248201527f5265717565737465722061646472657373207a65726f000000000000000000006044820152606401610452565b6001600160a01b038116610ff45760405162461bcd60e51b815260206004820152601360248201527f5365747465722061646472657373207a65726f000000000000000000000000006044820152606401610452565b60008061100b61100487876108bc565b8585611321565b91509150811561107157604080518681523360208201526001600160c01b0383168183015290516001600160a01b038581169287821692918a16917fdca622020d204c36e9588e7be4184758283d992606ab73318776824b44e2859d9181900360600190a45b505050505050565b60606108b583836040518060600160405280602781526020016119986027913961140f565b60008381526001602090815260408083206001600160a01b0386168452909152902054600160401b90046001600160c01b0316818015611109575060008481526002602090815260408083206001600160a01b0387168452825280832033845290915290205460ff16155b156111975760008481526002602090815260408083206001600160a01b038716845282528083203384529091529020805460ff191660011790558061114d8161194d565b60008681526001602090815260408083206001600160a01b03891684529091529020805467ffffffffffffffff16600160401b6001600160c01b0384160217905591506108b59050565b811580156111cf575060008481526002602090815260408083206001600160a01b0387168452825280832033845290915290205460ff165b156108b55760008481526002602090815260408083206001600160a01b038716845282528083203384529091529020805460ff191690558061121081611974565b60008681526001602090815260408083206001600160a01b0389168452909152902080546001600160c01b038316600160401b0267ffffffffffffffff9091161790559150509392505050565b60009283526001602090815260408085206001600160a01b039490941685529290529120805467ffffffffffffffff191667ffffffffffffffff909216919091179055565b60008381526001602090815260408083206001600160a01b038616845290915290205467ffffffffffffffff9081169082161161125d5760405162461bcd60e51b815260206004820152601a60248201527f446f6573206e6f7420657874656e642065787069726174696f6e0000000000006044820152606401610452565b60008381526001602090815260408083206001600160a01b0386811680865291845282852054888652600285528386209286529184528285209086168552909252822054600160401b9091046001600160c01b03169060ff16156114075760008581526002602090815260408083206001600160a01b03808916855290835281842090871684529091529020805460ff19169055806113bf81611974565b60008781526001602081815260408084206001600160a01b038b168552909152909120805467ffffffffffffffff16600160401b6001600160c01b0385160217905593509150505b935093915050565b6060833b6114855760405162461bcd60e51b815260206004820152602660248201527f416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f60448201527f6e747261637400000000000000000000000000000000000000000000000000006064820152608401610452565b600080856001600160a01b0316856040516114a09190611869565b600060405180830381855af49150503d80600081146114db576040519150601f19603f3d011682016040523d82523d6000602084013e6114e0565b606091505b50915091506103f6828286606083156114fa5750816108b5565b82511561150a5782518084602001fd5b8160405162461bcd60e51b815260040161045291906116ed565b80356001600160a01b038116811461153b57600080fd5b919050565b6000806000806080858703121561155657600080fd5b61155f85611524565b93506020850135925061157460408601611524565b915061158260608601611524565b905092959194509250565b600080600080600060a086880312156115a557600080fd5b853594506115b560208701611524565b9350604086013592506115ca60608701611524565b91506115d860808701611524565b90509295509295909350565b80151581146115f257600080fd5b50565b6000806000806080858703121561160b57600080fd5b61161485611524565b93506020850135925061162960408601611524565b91506060850135611639816115e4565b939692955090935050565b6000806000806080858703121561165a57600080fd5b61166385611524565b93506020850135925061167860408601611524565b9150606085013567ffffffffffffffff8116811461163957600080fd5b60005b838110156116b0578181015183820152602001611698565b838111156104675750506000910152565b600081518084526116d9816020860160208601611695565b601f01601f19169290920160200192915050565b6020815260006108b560208301846116c1565b60006020828403121561171257600080fd5b6108b582611524565b60008060006060848603121561173057600080fd5b61173984611524565b92506020840135915061174e60408501611524565b90509250925092565b6000806020838503121561176a57600080fd5b823567ffffffffffffffff8082111561178257600080fd5b818501915085601f83011261179657600080fd5b8135818111156117a557600080fd5b8660208260051b85010111156117ba57600080fd5b60209290920196919550909350505050565b6000602080830181845280855180835260408601915060408160051b870101925083870160005b8281101561182157603f1988860301845261180f8583516116c1565b945092850192908501906001016117f3565b5092979650505050505050565b600181811c9082168061184257607f821691505b6020821081141561186357634e487b7160e01b600052602260045260246000fd5b50919050565b6000825161187b818460208701611695565b9190910192915050565b634e487b7160e01b600052604160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b6000808335601e198436030181126118c857600080fd5b83018035915067ffffffffffffffff8211156118e357600080fd5b6020019150368190038213156118f857600080fd5b9250929050565b634e487b7160e01b600052601160045260246000fd5b6000600019821415611929576119296118ff565b5060010190565b60006020828403121561194257600080fd5b81516108b5816115e4565b60006001600160c01b038083168181141561196a5761196a6118ff565b6001019392505050565b60006001600160c01b0382168061198d5761198d6118ff565b600019019291505056fe416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a264697066735822122054c83dd126c12b6928fd970d1f434b676ba73e23c3efdfdac1ccc90a37703ce164736f6c63430008090033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "airnodeToEndpointIdToRequesterToSetterToIndefiniteWhitelistStatus(address,bytes32,address,address)": {
        "params": {
          "airnode": "Airnode address",
          "endpointId": "Endpoint ID",
          "requester": "Requester address",
          "setter": "Address of the account that has potentially whitelisted `requester` for the `airnode`–`endpointId` pair indefinitely"
        },
        "returns": {
          "indefiniteWhitelistStatus": "If `setter` has indefinitely whitelisted `requester` for the `airnode`–`endpointId` pair"
        }
      },
      "airnodeToEndpointIdToRequesterToWhitelistStatus(address,bytes32,address)": {
        "params": {
          "airnode": "Airnode address",
          "endpointId": "Endpoint ID",
          "requester": "Requester address"
        },
        "returns": {
          "expirationTimestamp": "Timestamp at which the temporary whitelist will expire",
          "indefiniteWhitelistCount": "Number of times `requester` was whitelisted indefinitely for the `airnode`–`endpointId` pair"
        }
      },
      "constructor": {
        "params": {
          "_accessControlRegistry": "AccessControlRegistry contract address",
          "_adminRoleDescription": "Admin role description"
        }
      },
      "deriveAdminRole(address)": {
        "params": {
          "airnode": "Airnode address"
        },
        "returns": {
          "adminRole": "Admin role"
        }
      },
      "deriveIndefiniteWhitelisterRole(address)": {
        "params": {
          "airnode": "Airnode address"
        },
        "returns": {
          "indefiniteWhitelisterRole": "Indefinite whitelister role"
        }
      },
      "deriveWhitelistExpirationExtenderRole(address)": {
        "params": {
          "airnode": "Airnode address"
        },
        "returns": {
          "whitelistExpirationExtenderRole": "Whitelist expiration extender role"
        }
      },
      "deriveWhitelistExpirationSetterRole(address)": {
        "params": {
          "airnode": "Airnode address"
        },
        "returns": {
          "whitelistExpirationSetterRole": "Whitelist expiration setter role"
        }
      },
      "extendWhitelistExpiration(address,bytes32,address,uint64)": {
        "params": {
          "airnode": "Airnode address",
          "endpointId": "Endpoint ID",
          "expirationTimestamp": "Timestamp at which the temporary whitelist will expire",
          "requester": "Requester address"
        }
      },
      "isAuthorized(address,bytes32,address)": {
        "params": {
          "airnode": "Airnode address",
          "endpointId": "Endpoint ID",
          "requester": "Requester address"
        },
        "returns": {
          "_0": "Authorization status of the request"
        }
      },
      "isAuthorizedV0(bytes32,address,bytes32,address,address)": {
        "details": "This method has redundant arguments because V0 authorizer contracts have to have the same interface and potential authorizer contracts may require to access the arguments that are redundant here",
        "params": {
          "airnode": "Airnode address",
          "endpointId": "Endpoint ID",
          "requestId": "Request ID",
          "requester": "Requester address",
          "sponsor": "Sponsor address"
        },
        "returns": {
          "_0": "Authorization status of the request"
        }
      },
      "multicall(bytes[])": {
        "details": "Receives and executes a batch of function calls on this contract."
      },
      "revokeIndefiniteWhitelistStatus(address,bytes32,address,address)": {
        "params": {
          "airnode": "Airnode address",
          "endpointId": "Endpoint ID",
          "requester": "Requester address",
          "setter": "Setter of the indefinite whitelist status"
        }
      },
      "setIndefiniteWhitelistStatus(address,bytes32,address,bool)": {
        "params": {
          "airnode": "Airnode address",
          "endpointId": "Endpoint ID",
          "requester": "Requester address",
          "status": "Indefinite whitelist status"
        }
      },
      "setWhitelistExpiration(address,bytes32,address,uint64)": {
        "details": "Unlike `extendWhitelistExpiration()`, this can hasten expiration",
        "params": {
          "airnode": "Airnode address",
          "endpointId": "Endpoint ID",
          "expirationTimestamp": "Timestamp at which the temporary whitelist will expire",
          "requester": "Requester address"
        }
      }
    },
    "title": "Authorizer contract that Airnode operators can use to temporarily or indefinitely whitelist requesters for Airnode–endpoint pairs",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "INDEFINITE_WHITELISTER_ROLE_DESCRIPTION()": {
        "notice": "Indefinite whitelister role description"
      },
      "WHITELIST_EXPIRATION_EXTENDER_ROLE_DESCRIPTION()": {
        "notice": "Whitelist expiration extender role description"
      },
      "WHITELIST_EXPIRATION_SETTER_ROLE_DESCRIPTION()": {
        "notice": "Whitelist expiration setter role description"
      },
      "accessControlRegistry()": {
        "notice": "AccessControlRegistry contract address"
      },
      "adminRoleDescription()": {
        "notice": "Admin role description"
      },
      "airnodeToEndpointIdToRequesterToSetterToIndefiniteWhitelistStatus(address,bytes32,address,address)": {
        "notice": "Returns if an account has indefinitely whitelisted `requester` for the `airnode`–`endpointId` pair"
      },
      "airnodeToEndpointIdToRequesterToWhitelistStatus(address,bytes32,address)": {
        "notice": "Returns the whitelist status of `requester` for the `airnode`–`endpointId` pair"
      },
      "deriveAdminRole(address)": {
        "notice": "Derives the admin role for the Airnode"
      },
      "deriveIndefiniteWhitelisterRole(address)": {
        "notice": "Derives the indefinite whitelister role for the Airnode"
      },
      "deriveWhitelistExpirationExtenderRole(address)": {
        "notice": "Derives the whitelist expiration extender role for the Airnode"
      },
      "deriveWhitelistExpirationSetterRole(address)": {
        "notice": "Derives the whitelist expiration setter role for the Airnode"
      },
      "extendWhitelistExpiration(address,bytes32,address,uint64)": {
        "notice": "Extends the expiration of the temporary whitelist of `requester` for the `airnode`–`endpointId` pair if the sender has the whitelist expiration extender role"
      },
      "isAuthorized(address,bytes32,address)": {
        "notice": "Verifies the authorization status of a request"
      },
      "isAuthorizedV0(bytes32,address,bytes32,address,address)": {
        "notice": "Verifies the authorization status of a request"
      },
      "revokeIndefiniteWhitelistStatus(address,bytes32,address,address)": {
        "notice": "Revokes the indefinite whitelist status granted by a specific account that no longer has the indefinite whitelister role"
      },
      "setIndefiniteWhitelistStatus(address,bytes32,address,bool)": {
        "notice": "Sets the indefinite whitelist status of `requester` for the `airnode`–`endpointId` pair if the sender has the indefinite whitelister role"
      },
      "setWhitelistExpiration(address,bytes32,address,uint64)": {
        "notice": "Sets the expiration of the temporary whitelist of `requester` for the `airnode`–`endpointId` pair if the sender has the whitelist expiration setter role"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 1697,
        "contract": "contracts/authorizers/RequesterAuthorizerWithAirnode.sol:RequesterAuthorizerWithAirnode",
        "label": "adminRoleDescription",
        "offset": 0,
        "slot": "0",
        "type": "t_string_storage"
      },
      {
        "astId": 4995,
        "contract": "contracts/authorizers/RequesterAuthorizerWithAirnode.sol:RequesterAuthorizerWithAirnode",
        "label": "serviceIdToUserToWhitelistStatus",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_bytes32,t_mapping(t_address,t_struct(WhitelistStatus)4988_storage))"
      },
      {
        "astId": 5003,
        "contract": "contracts/authorizers/RequesterAuthorizerWithAirnode.sol:RequesterAuthorizerWithAirnode",
        "label": "serviceIdToUserToSetterToIndefiniteWhitelistStatus",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_bytes32,t_mapping(t_address,t_mapping(t_address,t_bool)))"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_address,t_struct(WhitelistStatus)4988_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct Whitelist.WhitelistStatus)",
        "numberOfBytes": "32",
        "value": "t_struct(WhitelistStatus)4988_storage"
      },
      "t_mapping(t_bytes32,t_mapping(t_address,t_mapping(t_address,t_bool)))": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => mapping(address => mapping(address => bool)))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      },
      "t_mapping(t_bytes32,t_mapping(t_address,t_struct(WhitelistStatus)4988_storage))": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => mapping(address => struct Whitelist.WhitelistStatus))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_struct(WhitelistStatus)4988_storage)"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(WhitelistStatus)4988_storage": {
        "encoding": "inplace",
        "label": "struct Whitelist.WhitelistStatus",
        "members": [
          {
            "astId": 4985,
            "contract": "contracts/authorizers/RequesterAuthorizerWithAirnode.sol:RequesterAuthorizerWithAirnode",
            "label": "expirationTimestamp",
            "offset": 0,
            "slot": "0",
            "type": "t_uint64"
          },
          {
            "astId": 4987,
            "contract": "contracts/authorizers/RequesterAuthorizerWithAirnode.sol:RequesterAuthorizerWithAirnode",
            "label": "indefiniteWhitelistCount",
            "offset": 8,
            "slot": "0",
            "type": "t_uint192"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_uint192": {
        "encoding": "inplace",
        "label": "uint192",
        "numberOfBytes": "24"
      },
      "t_uint64": {
        "encoding": "inplace",
        "label": "uint64",
        "numberOfBytes": "8"
      }
    }
  }
}
